{"ast":null,"code":"/**\n * Utility functions for handling media in the application\n */\n\n/**\n * Get the base URL for media files\n * @returns {string} The base URL for media files\n */\nexport const getMediaBaseUrl = () => {\n  return process.env.REACT_APP_API_URL || \"http://localhost:8080\";\n};\n\n/**\n * Format a media URL to ensure it's properly formed\n * @param {string} url The raw URL from the backend\n * @returns {string} A properly formatted URL\n */\nexport const formatMediaUrl = url => {\n  if (!url) return null;\n\n  // Log the original URL for debugging\n  console.log(\"Original URL:\", url);\n\n  // If it's already an absolute URL, return it as is\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    console.log(\"URL is already absolute:\", url);\n    return url;\n  }\n  const baseUrl = getMediaBaseUrl();\n  console.log(\"Base URL:\", baseUrl);\n  let formattedUrl;\n\n  // If it's a relative URL starting with /uploads/, just prepend the base URL\n  if (url.startsWith(\"/uploads/\")) {\n    formattedUrl = `${baseUrl}${url}`;\n  }\n  // If it's a relative URL starting with uploads/, prepend the base URL and a slash\n  else if (url.startsWith(\"uploads/\")) {\n    formattedUrl = `${baseUrl}/${url}`;\n  }\n  // For other filenames, assume they should be in the uploads directory\n  else {\n    formattedUrl = `${baseUrl}/uploads/${url}`;\n  }\n  console.log(\"Formatted URL:\", formattedUrl);\n  return formattedUrl;\n};\n\n/**\n * Process an array of media items to ensure all URLs are properly formatted\n * @param {Array} mediaItems Array of media objects\n * @returns {Array} Array of media objects with formatted URLs\n */\nexport const processMediaItems = mediaItems => {\n  if (!mediaItems || !Array.isArray(mediaItems)) return [];\n  console.log(\"Processing media items:\", mediaItems);\n  return mediaItems.map(media => {\n    if (!media) return media;\n    const processedMedia = {\n      ...media,\n      url: formatMediaUrl(media.url)\n    };\n    console.log(\"Processed media item:\", processedMedia);\n    return processedMedia;\n  });\n};\n\n/**\n * Determine if a URL points to an image\n * @param {string} url The URL to check\n * @returns {boolean} True if the URL points to an image\n */\nexport const isImageUrl = url => {\n  if (!url) return false;\n  const lowercaseUrl = url.toLowerCase();\n  return lowercaseUrl.endsWith(\".jpg\") || lowercaseUrl.endsWith(\".jpeg\") || lowercaseUrl.endsWith(\".png\") || lowercaseUrl.endsWith(\".gif\") || lowercaseUrl.endsWith(\".webp\");\n};\n\n/**\n * Determine if a URL points to a video\n * @param {string} url The URL to check\n * @returns {boolean} True if the URL points to a video\n */\nexport const isVideoUrl = url => {\n  if (!url) return false;\n  const lowercaseUrl = url.toLowerCase();\n  return lowercaseUrl.endsWith(\".mp4\") || lowercaseUrl.endsWith(\".webm\") || lowercaseUrl.endsWith(\".ogg\") || lowercaseUrl.endsWith(\".mov\");\n};\n\n/**\n * Create a direct image URL for testing\n * This is a fallback method to try different URL formats\n * @param {string} filename The image filename\n * @returns {string} A direct URL to the image\n */\nexport const createDirectImageUrl = filename => {\n  if (!filename) return null;\n  const baseUrl = getMediaBaseUrl();\n\n  // Try different path formats\n  const paths = [`${baseUrl}/uploads/${filename}`, `${baseUrl}/uploads/images/${filename}`, `${baseUrl}/images/${filename}`, `${baseUrl}/media/${filename}`, `${baseUrl}/${filename}`];\n  console.log(\"Possible image paths:\", paths);\n  return paths[0]; // Return the first option as default\n};","map":{"version":3,"names":["getMediaBaseUrl","process","env","REACT_APP_API_URL","formatMediaUrl","url","console","log","startsWith","baseUrl","formattedUrl","processMediaItems","mediaItems","Array","isArray","map","media","processedMedia","isImageUrl","lowercaseUrl","toLowerCase","endsWith","isVideoUrl","createDirectImageUrl","filename","paths"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/utils/mediaUtils.js"],"sourcesContent":["/**\n * Utility functions for handling media in the application\n */\n\n/**\n * Get the base URL for media files\n * @returns {string} The base URL for media files\n */\nexport const getMediaBaseUrl = () => {\n    return process.env.REACT_APP_API_URL || \"http://localhost:8080\"\n  }\n  \n  /**\n   * Format a media URL to ensure it's properly formed\n   * @param {string} url The raw URL from the backend\n   * @returns {string} A properly formatted URL\n   */\n  export const formatMediaUrl = (url) => {\n    if (!url) return null\n  \n    // Log the original URL for debugging\n    console.log(\"Original URL:\", url)\n  \n    // If it's already an absolute URL, return it as is\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      console.log(\"URL is already absolute:\", url)\n      return url\n    }\n  \n    const baseUrl = getMediaBaseUrl()\n    console.log(\"Base URL:\", baseUrl)\n  \n    let formattedUrl\n  \n    // If it's a relative URL starting with /uploads/, just prepend the base URL\n    if (url.startsWith(\"/uploads/\")) {\n      formattedUrl = `${baseUrl}${url}`\n    }\n    // If it's a relative URL starting with uploads/, prepend the base URL and a slash\n    else if (url.startsWith(\"uploads/\")) {\n      formattedUrl = `${baseUrl}/${url}`\n    }\n    // For other filenames, assume they should be in the uploads directory\n    else {\n      formattedUrl = `${baseUrl}/uploads/${url}`\n    }\n  \n    console.log(\"Formatted URL:\", formattedUrl)\n    return formattedUrl\n  }\n  \n  /**\n   * Process an array of media items to ensure all URLs are properly formatted\n   * @param {Array} mediaItems Array of media objects\n   * @returns {Array} Array of media objects with formatted URLs\n   */\n  export const processMediaItems = (mediaItems) => {\n    if (!mediaItems || !Array.isArray(mediaItems)) return []\n  \n    console.log(\"Processing media items:\", mediaItems)\n  \n    return mediaItems.map((media) => {\n      if (!media) return media\n  \n      const processedMedia = {\n        ...media,\n        url: formatMediaUrl(media.url),\n      }\n      \n      console.log(\"Processed media item:\", processedMedia)\n      return processedMedia\n    })\n  }\n  \n  /**\n   * Determine if a URL points to an image\n   * @param {string} url The URL to check\n   * @returns {boolean} True if the URL points to an image\n   */\n  export const isImageUrl = (url) => {\n    if (!url) return false\n  \n    const lowercaseUrl = url.toLowerCase()\n    return (\n      lowercaseUrl.endsWith(\".jpg\") ||\n      lowercaseUrl.endsWith(\".jpeg\") ||\n      lowercaseUrl.endsWith(\".png\") ||\n      lowercaseUrl.endsWith(\".gif\") ||\n      lowercaseUrl.endsWith(\".webp\")\n    )\n  }\n  \n  /**\n   * Determine if a URL points to a video\n   * @param {string} url The URL to check\n   * @returns {boolean} True if the URL points to a video\n   */\n  export const isVideoUrl = (url) => {\n    if (!url) return false\n  \n    const lowercaseUrl = url.toLowerCase()\n    return (\n      lowercaseUrl.endsWith(\".mp4\") ||\n      lowercaseUrl.endsWith(\".webm\") ||\n      lowercaseUrl.endsWith(\".ogg\") ||\n      lowercaseUrl.endsWith(\".mov\")\n    )\n  }\n  \n  /**\n   * Create a direct image URL for testing\n   * This is a fallback method to try different URL formats\n   * @param {string} filename The image filename\n   * @returns {string} A direct URL to the image\n   */\n  export const createDirectImageUrl = (filename) => {\n    if (!filename) return null\n    \n    const baseUrl = getMediaBaseUrl()\n    \n    // Try different path formats\n    const paths = [\n      `${baseUrl}/uploads/${filename}`,\n      `${baseUrl}/uploads/images/${filename}`,\n      `${baseUrl}/images/${filename}`,\n      `${baseUrl}/media/${filename}`,\n      `${baseUrl}/${filename}`\n    ]\n    \n    console.log(\"Possible image paths:\", paths)\n    return paths[0] // Return the first option as default\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}