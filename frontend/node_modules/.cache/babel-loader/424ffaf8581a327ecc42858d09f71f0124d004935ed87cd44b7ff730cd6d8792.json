{"ast":null,"code":"// import axios from \"axios\"\n// import env from \"../config/env\"\n\n// // Create axios instance with default config\n// export const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// })\n\n// // Add this for debugging\n// if (env.DEBUG) {\n//   api.interceptors.request.use((request) => {\n//     console.log(\"Starting Request\", request)\n//     return request\n//   })\n\n//   api.interceptors.response.use(\n//     (response) => {\n//       console.log(\"Response:\", response)\n//       return response\n//     },\n//     (error) => {\n//       console.log(\"Response Error:\", error)\n//       return Promise.reject(error)\n//     },\n//   )\n// }\n\n// // Add request interceptor to set auth token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem(\"token\")\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`\n//     }\n//     return config\n//   },\n//   (error) => {\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Add response interceptor to handle errors\n// api.interceptors.response.use(\n//   (response) => {\n//     // Log successful responses in development\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.log(`Response from ${response.config.url}:`, response.data)\n//     }\n//     return response\n//   },\n//   (error) => {\n//     // Log error responses in development\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.error(`Error from ${error.config?.url}:`, error.response?.data || error.message)\n//     }\n\n//     // Handle 401 Unauthorized by logging out user\n//     if (error.response && error.response.status === 401) {\n//       // If the path is not login or register, clear token\n//       if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n//         localStorage.removeItem(\"token\")\n//         window.location.href = \"/login\"\n//       }\n//     }\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Auth API\n// export const authAPI = {\n//   login: (credentials) => api.post(\"/api/auth/login\", credentials),\n//   register: (userData) => api.post(\"/api/auth/register\", userData),\n// }\n\n// // User API\n// export const userAPI = {\n//   getUserByUsername: (username) => api.get(`/api/users/${username}`),\n//   updateUser: (id, userData) => {\n//     // Check if userData is FormData\n//     const isFormData = userData instanceof FormData\n\n//     // Set the appropriate content type\n//     const headers = isFormData ? { \"Content-Type\": \"multipart/form-data\" } : { \"Content-Type\": \"application/json\" }\n\n//     console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`)\n\n//     return api.put(`/api/users/${id}`, userData, { headers })\n//   },\n//   searchUsers: (query) => api.get(`/api/users/search?query=${query}`),\n//   getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n//   followUser: (id) => api.post(`/api/users/${id}/follow`),\n//   unfollowUser: (id) => api.post(`/api/users/${id}/unfollow`),\n//   getFollowers: (id) => api.get(`/api/users/${id}/followers`),\n//   getFollowing: (id) => api.get(`/api/users/${id}/following`),\n// }\n\n// // Post API\n// export const postAPI = {\n//   getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n//   getPostById: (id) => api.get(`/api/posts/${id}`),\n//   getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n//   getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n//   searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n//   createPost: (postData, files) => {\n//     const formData = new FormData()\n\n//     // Add the post data as a JSON blob\n//     formData.append(\"post\", new Blob([JSON.stringify(postData)], { type: \"application/json\" }))\n\n//     // Add files if they exist\n//     if (files && files.length > 0) {\n//       files.forEach((file, index) => {\n//         if (file) {\n//           console.log(`Appending file ${index}:`, file.name, file.type, file.size)\n//           formData.append(\"files\", file)\n//         }\n//       })\n//     }\n\n//     // Log the form data for debugging (can't log FormData directly, so we log the values)\n//     console.log(\"Creating post with data:\", postData)\n//     console.log(\"Files count:\", files ? files.length : 0)\n\n//     // Inspect the FormData (not directly possible but we can iterate)\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1])\n//     }\n\n//     return api.post(\"/api/posts/create\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     })\n//   },\n//   updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n//   deletePost: (id) => api.delete(`/api/posts/${id}`),\n// }\n\n// // Comment API\n// export const commentAPI = {\n//   getCommentsByPostId: (postId) => api.get(`/api/posts/${postId}/comments`),\n//   createComment: async (postId, commentData) => {\n//     console.log(`Creating comment for post ${postId} with data:`, commentData)\n//     try {\n//       const response = await api.post(`/api/posts/${postId}/comments`, commentData)\n//       console.log(\"Comment creation response:\", response)\n//       return response\n//     } catch (error) {\n//       console.error(`Error creating comment for post ${postId}:`, error)\n//       console.error(\"Error response:\", error.response?.data)\n//       throw error\n//     }\n//   },\n//   updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n//   deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\n// }\n\n// // Like API\n// export const likeAPI = {\n//   likePost: (postId) => api.post(`/api/posts/${postId}/likes`),\n//   unlikePost: (postId) => api.delete(`/api/posts/${postId}/likes`),\n//   getLikesCount: (postId) => api.get(`/api/posts/${postId}/likes/count`),\n//   isPostLikedByUser: (postId) => api.get(`/api/posts/${postId}/likes/status`),\n// }\n\n// // Learning Plan API\n// export const learningPlanAPI = {\n//   getAllLearningPlans: (page = 0, size = 10) => {\n//     console.log(`Fetching all learning plans with page=${page}, size=${size}`)\n//     return api.get(`/api/learning-plans?page=${page}&size=${size}`)\n//   },\n//   getLearningPlansByUserId: (userId) => {\n//     console.log(`Fetching learning plans for user ${userId}`)\n//     return api.get(`/api/learning-plans/user/${userId}`)\n//   },\n//   getLearningPlanById: (id) => {\n//     console.log(`Fetching learning plan with id ${id}`)\n//     return api.get(`/api/learning-plans/${id}`)\n//   },\n//   searchLearningPlans: (query, page = 0, size = 10) => {\n//     console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`)\n//     return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`)\n//   },\n//   createLearningPlan: (planData) => {\n//     console.log(`Creating learning plan with data:`, planData)\n//     return api.post(\"/api/learning-plans\", planData)\n//   },\n//   updateLearningPlan: (id, planData) => {\n//     console.log(`Updating learning plan ${id} with data:`, planData)\n//     return api.put(`/api/learning-plans/${id}`, planData)\n//   },\n//   deleteLearningPlan: (id) => {\n//     console.log(`Deleting learning plan ${id}`)\n//     return api.delete(`/api/learning-plans/${id}`)\n//   },\n//   updateTopicCompletion: (planId, topicId, completed) => {\n//     console.log(`Updating topic ${topicId} completion status to ${completed}`)\n//     return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, { completed })\n//   },\n// }\n\n// // Story API\n// export const storyAPI = {\n//   getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n//   getUserStories: (userId) => api.get(`/api/stories/user/${userId}`),\n//   getFeedStories: () => api.get(\"/api/stories/feed\"),\n//   createStory: (storyData, mediaFile) => {\n//     const formData = new FormData()\n\n//     // Use form parameters instead of JSON for the story data\n//     if (storyData.title) {\n//       formData.append(\"title\", storyData.title)\n//     }\n\n//     if (storyData.content) {\n//       formData.append(\"content\", storyData.content)\n//     }\n\n//     if (mediaFile) {\n//       console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size)\n//       formData.append(\"media\", mediaFile)\n//     }\n\n//     // Log the form data for debugging\n//     console.log(\"Creating story with data:\", storyData)\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1])\n//     }\n\n//     return api.post(\"/api/stories/upload\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     })\n//   },\n//   viewStory: (id) => api.post(`/api/stories/${id}/view`),\n//   deleteStory: (id) => api.delete(`/api/stories/${id}`),\n// }\n\n// // Notification API\n// export const notificationAPI = {\n//   getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n//   readNotification: (id) => api.put(`/api/notifications/${id}/read`),\n//   deleteNotification: (id) => api.delete(`/api/notifications/${id}`),\n// }","map":{"version":3,"names":[],"sources":["C:/Users/USER/Downloads/PAF-Project-main/PAF-Project-main/frontend/src/utils/api.js"],"sourcesContent":["// import axios from \"axios\"\n// import env from \"../config/env\"\n\n// // Create axios instance with default config\n// export const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// })\n\n// // Add this for debugging\n// if (env.DEBUG) {\n//   api.interceptors.request.use((request) => {\n//     console.log(\"Starting Request\", request)\n//     return request\n//   })\n\n//   api.interceptors.response.use(\n//     (response) => {\n//       console.log(\"Response:\", response)\n//       return response\n//     },\n//     (error) => {\n//       console.log(\"Response Error:\", error)\n//       return Promise.reject(error)\n//     },\n//   )\n// }\n\n// // Add request interceptor to set auth token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = localStorage.getItem(\"token\")\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`\n//     }\n//     return config\n//   },\n//   (error) => {\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Add response interceptor to handle errors\n// api.interceptors.response.use(\n//   (response) => {\n//     // Log successful responses in development\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.log(`Response from ${response.config.url}:`, response.data)\n//     }\n//     return response\n//   },\n//   (error) => {\n//     // Log error responses in development\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.error(`Error from ${error.config?.url}:`, error.response?.data || error.message)\n//     }\n\n//     // Handle 401 Unauthorized by logging out user\n//     if (error.response && error.response.status === 401) {\n//       // If the path is not login or register, clear token\n//       if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n//         localStorage.removeItem(\"token\")\n//         window.location.href = \"/login\"\n//       }\n//     }\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Auth API\n// export const authAPI = {\n//   login: (credentials) => api.post(\"/api/auth/login\", credentials),\n//   register: (userData) => api.post(\"/api/auth/register\", userData),\n// }\n\n// // User API\n// export const userAPI = {\n//   getUserByUsername: (username) => api.get(`/api/users/${username}`),\n//   updateUser: (id, userData) => {\n//     // Check if userData is FormData\n//     const isFormData = userData instanceof FormData\n\n//     // Set the appropriate content type\n//     const headers = isFormData ? { \"Content-Type\": \"multipart/form-data\" } : { \"Content-Type\": \"application/json\" }\n\n//     console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`)\n\n//     return api.put(`/api/users/${id}`, userData, { headers })\n//   },\n//   searchUsers: (query) => api.get(`/api/users/search?query=${query}`),\n//   getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n//   followUser: (id) => api.post(`/api/users/${id}/follow`),\n//   unfollowUser: (id) => api.post(`/api/users/${id}/unfollow`),\n//   getFollowers: (id) => api.get(`/api/users/${id}/followers`),\n//   getFollowing: (id) => api.get(`/api/users/${id}/following`),\n// }\n\n// // Post API\n// export const postAPI = {\n//   getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n//   getPostById: (id) => api.get(`/api/posts/${id}`),\n//   getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n//   getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n//   searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n//   createPost: (postData, files) => {\n//     const formData = new FormData()\n\n//     // Add the post data as a JSON blob\n//     formData.append(\"post\", new Blob([JSON.stringify(postData)], { type: \"application/json\" }))\n\n//     // Add files if they exist\n//     if (files && files.length > 0) {\n//       files.forEach((file, index) => {\n//         if (file) {\n//           console.log(`Appending file ${index}:`, file.name, file.type, file.size)\n//           formData.append(\"files\", file)\n//         }\n//       })\n//     }\n\n//     // Log the form data for debugging (can't log FormData directly, so we log the values)\n//     console.log(\"Creating post with data:\", postData)\n//     console.log(\"Files count:\", files ? files.length : 0)\n\n//     // Inspect the FormData (not directly possible but we can iterate)\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1])\n//     }\n\n//     return api.post(\"/api/posts/create\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     })\n//   },\n//   updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n//   deletePost: (id) => api.delete(`/api/posts/${id}`),\n// }\n\n// // Comment API\n// export const commentAPI = {\n//   getCommentsByPostId: (postId) => api.get(`/api/posts/${postId}/comments`),\n//   createComment: async (postId, commentData) => {\n//     console.log(`Creating comment for post ${postId} with data:`, commentData)\n//     try {\n//       const response = await api.post(`/api/posts/${postId}/comments`, commentData)\n//       console.log(\"Comment creation response:\", response)\n//       return response\n//     } catch (error) {\n//       console.error(`Error creating comment for post ${postId}:`, error)\n//       console.error(\"Error response:\", error.response?.data)\n//       throw error\n//     }\n//   },\n//   updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n//   deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\n// }\n\n// // Like API\n// export const likeAPI = {\n//   likePost: (postId) => api.post(`/api/posts/${postId}/likes`),\n//   unlikePost: (postId) => api.delete(`/api/posts/${postId}/likes`),\n//   getLikesCount: (postId) => api.get(`/api/posts/${postId}/likes/count`),\n//   isPostLikedByUser: (postId) => api.get(`/api/posts/${postId}/likes/status`),\n// }\n\n// // Learning Plan API\n// export const learningPlanAPI = {\n//   getAllLearningPlans: (page = 0, size = 10) => {\n//     console.log(`Fetching all learning plans with page=${page}, size=${size}`)\n//     return api.get(`/api/learning-plans?page=${page}&size=${size}`)\n//   },\n//   getLearningPlansByUserId: (userId) => {\n//     console.log(`Fetching learning plans for user ${userId}`)\n//     return api.get(`/api/learning-plans/user/${userId}`)\n//   },\n//   getLearningPlanById: (id) => {\n//     console.log(`Fetching learning plan with id ${id}`)\n//     return api.get(`/api/learning-plans/${id}`)\n//   },\n//   searchLearningPlans: (query, page = 0, size = 10) => {\n//     console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`)\n//     return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`)\n//   },\n//   createLearningPlan: (planData) => {\n//     console.log(`Creating learning plan with data:`, planData)\n//     return api.post(\"/api/learning-plans\", planData)\n//   },\n//   updateLearningPlan: (id, planData) => {\n//     console.log(`Updating learning plan ${id} with data:`, planData)\n//     return api.put(`/api/learning-plans/${id}`, planData)\n//   },\n//   deleteLearningPlan: (id) => {\n//     console.log(`Deleting learning plan ${id}`)\n//     return api.delete(`/api/learning-plans/${id}`)\n//   },\n//   updateTopicCompletion: (planId, topicId, completed) => {\n//     console.log(`Updating topic ${topicId} completion status to ${completed}`)\n//     return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, { completed })\n//   },\n// }\n\n// // Story API\n// export const storyAPI = {\n//   getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n//   getUserStories: (userId) => api.get(`/api/stories/user/${userId}`),\n//   getFeedStories: () => api.get(\"/api/stories/feed\"),\n//   createStory: (storyData, mediaFile) => {\n//     const formData = new FormData()\n\n//     // Use form parameters instead of JSON for the story data\n//     if (storyData.title) {\n//       formData.append(\"title\", storyData.title)\n//     }\n\n//     if (storyData.content) {\n//       formData.append(\"content\", storyData.content)\n//     }\n\n//     if (mediaFile) {\n//       console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size)\n//       formData.append(\"media\", mediaFile)\n//     }\n\n//     // Log the form data for debugging\n//     console.log(\"Creating story with data:\", storyData)\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1])\n//     }\n\n//     return api.post(\"/api/stories/upload\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     })\n//   },\n//   viewStory: (id) => api.post(`/api/stories/${id}/view`),\n//   deleteStory: (id) => api.delete(`/api/stories/${id}`),\n// }\n\n// // Notification API\n// export const notificationAPI = {\n//   getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n//   readNotification: (id) => api.put(`/api/notifications/${id}/read`),\n//   deleteNotification: (id) => api.delete(`/api/notifications/${id}`),\n// }\n\n\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}