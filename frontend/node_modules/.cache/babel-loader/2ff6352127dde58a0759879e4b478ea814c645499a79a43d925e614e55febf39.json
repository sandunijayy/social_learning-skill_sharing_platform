{"ast":null,"code":"// import axios from \"axios\";\n// import env from \"../config/env\";\n\n// // Create axios instance with default config\n// export const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Add debug interceptors\n// if (env.DEBUG) {\n//   api.interceptors.request.use((request) => {\n//     console.log(\"Starting Request\", request);\n//     return request;\n//   });\n\n//   api.interceptors.response.use(\n//     (response) => {\n//       console.log(\"Response:\", response);\n//       return response;\n//     },\n//     (error) => {\n//       console.log(\"Response Error:\", error.response?.data || error.message);\n//       return Promise.reject(error);\n//     },\n//   );\n// }\n\n// // Add request interceptor to set auth token\n// api.interceptors.request.use(\n//   (config) => {\n//     console.log(\"Making API request with config:\", config); // CHANGED: Added detailed logging\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   },\n// );\n\n// // Add response interceptor to handle errors\n// api.interceptors.response.use(\n//   (response) => {\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.log(`Response from ${response.config.url}:`, response.data);\n//     }\n//     return response;\n//   },\n//   (error) => {\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.error(`Error from ${error.config?.url}:`, error.response?.data || error.message);\n//     }\n//     // CHANGED: Only redirect on 401, not 403, to allow FeedbacksPage to handle 403 errors\n//     if (error.response && error.response.status === 401) {\n//       if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n//         console.log(\"401 error detected, clearing token and redirecting to /login\");\n//         localStorage.removeItem(\"token\");\n//         window.location.href = \"/login\";\n//       }\n//     }\n//     return Promise.reject(error);\n//   },\n// );\n\n// // Auth API\n// export const authAPI = {\n//   login: (credentials) => api.post(\"/api/auth/login\", credentials),\n//   register: (userData) => api.post(\"/api/auth/register\", userData),\n// };\n\n// // User API\n// export const userAPI = {\n//   getUserByUsername: (username) => api.get(`/api/users/${username}`),\n//   updateUser: (id, userData) => {\n//     const isFormData = userData instanceof FormData;\n//     const headers = isFormData ? { \"Content-Type\": \"multipart/form-data\" } : { \"Content-Type\": \"application/json\" };\n//     console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`);\n//     return api.put(`/api/users/${id}`, userData, { headers });\n//   },\n//   searchUsers: (query) => api.get(`/api/users/search?query=${query}`),\n//   getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n//   followUser: (id) => api.post(`/api/users/${id}/follow`),\n//   unfollowUser: (id) => api.post(`/api/users/${id}/unfollow`),\n//   getFollowers: (id) => api.get(`/api/users/${id}/followers`),\n//   getFollowing: (id) => api.get(`/api/users/${id}/following`),\n// };\n\n// // Post API\n// export const postAPI = {\n//   getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n//   getPostById: (id) => api.get(`/api/posts/${id}`),\n//   getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n//   getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n//   searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n//   createPost: (postData, files) => {\n//     const formData = new FormData();\n//     formData.append(\"post\", new Blob([JSON.stringify(postData)], { type: \"application/json\" }));\n//     if (files && files.length > 0) {\n//       files.forEach((file, index) => {\n//         if (file) {\n//           console.log(`Appending file ${index}:`, file.name, file.type, file.size);\n//           formData.append(\"files\", file);\n//         }\n//       });\n//     }\n//     console.log(\"Creating post with data:\", postData);\n//     console.log(\"Files count:\", files ? files.length : 0);\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1]);\n//     }\n//     return api.post(\"/api/posts/create\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     });\n//   },\n//   updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n//   deletePost: (id) => api.delete(`/api/posts/${id}`),\n// };\n\n// // Comment API\n// export const commentAPI = {\n//   getCommentsByPostId: (postId) => api.get(`/api/posts/${postId}/comments`),\n//   createComment: async (postId, commentData) => {\n//     console.log(`Creating comment for post ${postId} with data:`, commentData);\n//     try {\n//       const response = await api.post(`/api/posts/${postId}/comments`, commentData);\n//       console.log(\"Comment creation response:\", response);\n//       return response;\n//     } catch (error) {\n//       console.error(`Error creating comment for post ${postId}:`, error);\n//       console.error(\"Error response:\", error.response?.data);\n//       throw error;\n//     }\n//   },\n//   updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n//   deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\n// };\n\n// // Like API\n// export const likeAPI = {\n//   likePost: (postId) => api.post(`/api/posts/${postId}/likes`),\n//   unlikePost: (postId) => api.delete(`/api/posts/${postId}/likes`),\n//   getLikesCount: (postId) => api.get(`/api/posts/${postId}/likes/count`),\n//   isPostLikedByUser: (postId) => api.get(`/api/posts/${postId}/likes/status`),\n// };\n\n// // Learning Plan API\n// export const learningPlanAPI = {\n//   getAllLearningPlans: (page = 0, size = 10) => {\n//     console.log(`Fetching all learning plans with page=${page}, size=${size}`);\n//     return api.get(`/api/learning-plans?page=${page}&size=${size}`);\n//   },\n//   getLearningPlansByUserId: (userId) => {\n//     console.log(`Fetching learning plans for user ${userId}`);\n//     return api.get(`/api/learning-plans/user/${userId}`);\n//   },\n//   getLearningPlanById: (id) => {\n//     console.log(`Fetching learning plan with id ${id}`);\n//     return api.get(`/api/learning-plans/${id}`);\n//   },\n//   searchLearningPlans: (query, page = 0, size = 10) => {\n//     console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`);\n//     return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`);\n//   },\n//   createLearningPlan: (planData) => {\n//     console.log(`Creating learning plan with data:`, planData);\n//     return api.post(\"/api/learning-plans\", planData);\n//   },\n//   updateLearningPlan: (id, planData) => {\n//     console.log(`Updating learning plan ${id} with data:`, planData);\n//     return api.put(`/api/learning-plans/${id}`, planData);\n//   },\n//   deleteLearningPlan: (id) => {\n//     console.log(`Deleting learning plan ${id}`);\n//     return api.delete(`/api/learning-plans/${id}`);\n//   },\n//   updateTopicCompletion: (planId, topicId, completed) => {\n//     console.log(`Updating topic ${topicId} completion status to ${completed}`);\n//     return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, { completed });\n//   },\n// };\n\n// // Story API\n// export const storyAPI = {\n//   getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n//   getUserStories: (userId) => api.get(`/api/stories/user/${userId}`),\n//   getFeedStories: () => api.get(\"/api/stories/feed\"),\n//   createStory: (storyData, mediaFile) => {\n//     const formData = new FormData();\n//     if (storyData.title) {\n//       formData.append(\"title\", storyData.title);\n//     }\n//     if (storyData.content) {\n//       formData.append(\"content\", storyData.content);\n//     }\n//     if (mediaFile) {\n//       console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size);\n//       formData.append(\"media\", mediaFile);\n//     }\n//     console.log(\"Creating story with data:\", storyData);\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1]);\n//     }\n//     return api.post(\"/api/stories/upload\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     });\n//   },\n//   viewStory: (id) => api.post(`/api/stories/${id}/view`),\n//   deleteStory: (id) => api.delete(`/api/stories/${id}`),\n// };\n\n// // Notification API\n// export const notificationAPI = {\n//   getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n//   readNotification: (id) => api.put(`/api/notifications/${id}/read`),\n//   deleteNotification: (id) => api.delete(`/api/notifications/${id}`),\n//   getUnreadNotificationsCount: () => api.get(`/api/notifications/unread/count`), // NEW: Added to fix Header.js error\n// };\n\n// // Feedback API\n// export const feedbackAPI = {\n//   getAllFeedbacks: () => api.get(\"/api/feedbacks\"),\n//   getUserFeedbacks: () => api.get(\"/api/feedbacks/user\"),\n//   getFeedbackById: (id) => api.get(`/api/feedbacks/${id}`),\n//   createFeedback: (feedbackData) => {\n//     console.log(\"Creating feedback with data:\", feedbackData);\n//     return api.post(\"/api/feedbacks\", feedbackData);\n//   },\n//   updateFeedback: (id, feedbackData) => {\n//     console.log(`Updating feedback ${id} with data:`, feedbackData);\n//     return api.put(`/api/feedbacks/${id}`, feedbackData);\n//   },\n//   deleteFeedback: (id) => {\n//     console.log(`Deleting feedback ${id}`);\n//     return api.delete(`/api/feedbacks/${id}`);\n//   },\n// };\n\nimport axios from \"axios\";\nimport env from \"../config/env\";\n\n// Create axios instance with default config\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add debug interceptors\nif (env.DEBUG) {\n  api.interceptors.request.use(request => {\n    console.log(\"Starting Request\", request);\n    return request;\n  });\n  api.interceptors.response.use(response => {\n    console.log(\"Response:\", response);\n    return response;\n  }, error => {\n    var _error$response;\n    console.log(\"Response Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    return Promise.reject(error);\n  });\n}\n\n// Add request interceptor to set auth token\napi.interceptors.request.use(config => {\n  console.log(\"Making API request with config:\", config);\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => {\n  if (process.env.NODE_ENV === \"development\") {\n    console.log(`Response from ${response.config.url}:`, response.data);\n  }\n  return response;\n}, error => {\n  var _error$config2;\n  if (process.env.NODE_ENV === \"development\") {\n    var _error$config, _error$response2, _error$response3;\n    console.error(`Error from ${(_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url}:`, {\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n      data: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message\n    });\n  }\n  // CHANGED: Skip redirect for all /api/feedbacks/* endpoints\n  if (error.response && error.response.status === 401 && !((_error$config2 = error.config) !== null && _error$config2 !== void 0 && _error$config2.url.startsWith(\"/api/feedbacks/\"))) {\n    if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n      console.log(\"401 error detected, clearing token and redirecting to /login\");\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post(\"/api/auth/login\", credentials),\n  register: userData => api.post(\"/api/auth/register\", userData)\n};\n\n// User API\nexport const userAPI = {\n  getUserByUsername: username => api.get(`/api/users/${username}`),\n  updateUser: (id, userData) => {\n    const isFormData = userData instanceof FormData;\n    const headers = isFormData ? {\n      \"Content-Type\": \"multipart/form-data\"\n    } : {\n      \"Content-Type\": \"application/json\"\n    };\n    console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`);\n    return api.put(`/api/users/${id}`, userData, {\n      headers\n    });\n  },\n  searchUsers: query => api.get(`/api/users/search?query=${query}`),\n  getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n  followUser: id => api.post(`/api/users/${id}/follow`),\n  unfollowUser: id => api.post(`/api/users/${id}/unfollow`),\n  getFollowers: id => api.get(`/api/users/${id}/followers`),\n  getFollowing: id => api.get(`/api/users/${id}/following`)\n};\n\n// Post API\nexport const postAPI = {\n  getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n  getPostById: id => api.get(`/api/posts/${id}`),\n  getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n  getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n  searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n  createPost: (postData, files) => {\n    const formData = new FormData();\n    formData.append(\"post\", new Blob([JSON.stringify(postData)], {\n      type: \"application/json\"\n    }));\n    if (files && files.length > 0) {\n      files.forEach((file, index) => {\n        if (file) {\n          console.log(`Appending file ${index}:`, file.name, file.type, file.size);\n          formData.append(\"files\", file);\n        }\n      });\n    }\n    console.log(\"Creating post with data:\", postData);\n    console.log(\"Files count:\", files ? files.length : 0);\n    for (const pair of formData.entries()) {\n      console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1]);\n    }\n    return api.post(\"/api/posts/create\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n  updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n  deletePost: id => api.delete(`/api/posts/${id}`)\n};\n\n// Comment API\nexport const commentAPI = {\n  getCommentsByPostId: postId => api.get(`/api/posts/${postId}/comments`),\n  createComment: async (postId, commentData) => {\n    console.log(`Creating comment for post ${postId} with data:`, commentData);\n    try {\n      const response = await api.post(`/api/posts/${postId}/comments`, commentData);\n      console.log(\"Comment creation response:\", response);\n      return response;\n    } catch (error) {\n      var _error$response4;\n      console.error(`Error creating comment for post ${postId}:`, error);\n      console.error(\"Error response:\", (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n      throw error;\n    }\n  },\n  updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n  deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`)\n};\n\n// Like API\nexport const likeAPI = {\n  likePost: postId => api.post(`/api/posts/${postId}/likes`),\n  unlikePost: postId => api.delete(`/api/posts/${postId}/likes`),\n  getLikesCount: postId => api.get(`/api/posts/${postId}/likes/count`),\n  isPostLikedByUser: postId => api.get(`/api/posts/${postId}/likes/status`)\n};\n\n// Learning Plan API\nexport const learningPlanAPI = {\n  getAllLearningPlans: (page = 0, size = 10) => {\n    console.log(`Fetching all learning plans with page=${page}, size=${size}`);\n    return api.get(`/api/learning-plans?page=${page}&size=${size}`);\n  },\n  getLearningPlansByUserId: userId => {\n    console.log(`Fetching learning plans for user ${userId}`);\n    return api.get(`/api/learning-plans/user/${userId}`);\n  },\n  getLearningPlanById: id => {\n    console.log(`Fetching learning plan with id ${id}`);\n    return api.get(`/api/learning-plans/${id}`);\n  },\n  searchLearningPlans: (query, page = 0, size = 10) => {\n    console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`);\n    return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`);\n  },\n  createLearningPlan: planData => {\n    console.log(`Creating learning plan with data:`, planData);\n    return api.post(\"/api/learning-plans\", planData);\n  },\n  updateLearningPlan: (id, planData) => {\n    console.log(`Updating learning plan ${id} with data:`, planData);\n    return api.put(`/api/learning-plans/${id}`, planData);\n  },\n  deleteLearningPlan: id => {\n    console.log(`Deleting learning plan ${id}`);\n    return api.delete(`/api/learning-plans/${id}`);\n  },\n  updateTopicCompletion: (planId, topicId, completed) => {\n    console.log(`Updating topic ${topicId} completion status to ${completed}`);\n    return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, {\n      completed\n    });\n  }\n};\n\n// Story API\nexport const storyAPI = {\n  getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n  getUserStories: userId => api.get(`/api/stories/user/${userId}`),\n  getFeedStories: () => api.get(\"/api/stories/feed\"),\n  createStory: (storyData, mediaFile) => {\n    const formData = new FormData();\n    if (storyData.title) {\n      formData.append(\"title\", storyData.title);\n    }\n    if (storyData.content) {\n      formData.append(\"content\", storyData.content);\n    }\n    if (mediaFile) {\n      console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size);\n      formData.append(\"media\", mediaFile);\n    }\n    console.log(\"Creating story with data:\", storyData);\n    for (const pair of formData.entries()) {\n      console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1]);\n    }\n    return api.post(\"/api/stories/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n  viewStory: id => api.post(`/api/stories/${id}/view`),\n  deleteStory: id => api.delete(`/api/stories/${id}`)\n};\n\n// Notification API\nexport const notificationAPI = {\n  getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n  readNotification: id => api.put(`/api/notifications/${id}/read`),\n  deleteNotification: id => api.delete(`/api/notifications/${id}`),\n  getUnreadNotificationsCount: () => api.get(`/api/notifications/unread/count`)\n};\n\n// Feedback API\nexport const feedbackAPI = {\n  getAllFeedbacks: () => api.get(\"/api/feedbacks\"),\n  getUserFeedbacks: () => api.get(\"/api/feedbacks/user\"),\n  getFeedbackById: id => api.get(`/api/feedbacks/${id}`),\n  createFeedback: feedbackData => {\n    console.log(\"Creating feedback with data:\", feedbackData);\n    return api.post(\"/api/feedbacks\", feedbackData);\n  },\n  updateFeedback: (id, feedbackData) => {\n    console.log(`Updating feedback ${id} with data:`, feedbackData);\n    return api.put(`/api/feedbacks/${id}`, feedbackData);\n  },\n  deleteFeedback: id => {\n    console.log(`Deleting feedback ${id}`);\n    return api.delete(`/api/feedbacks/${id}`);\n  }\n};","map":{"version":3,"names":["axios","env","api","create","baseURL","process","REACT_APP_API_URL","headers","DEBUG","interceptors","request","use","console","log","response","error","_error$response","data","message","Promise","reject","config","token","localStorage","getItem","NODE_ENV","url","_error$config2","_error$config","_error$response2","_error$response3","status","startsWith","window","location","pathname","includes","removeItem","href","authAPI","login","credentials","post","register","userData","userAPI","getUserByUsername","username","get","updateUser","id","isFormData","FormData","put","searchUsers","query","getSuggestedUsers","limit","followUser","unfollowUser","getFollowers","getFollowing","postAPI","getAllPosts","page","size","getPostById","getPostsByUserId","userId","getFeedPosts","searchPosts","createPost","postData","files","formData","append","Blob","JSON","stringify","type","length","forEach","file","index","name","pair","entries","updatePost","deletePost","delete","commentAPI","getCommentsByPostId","postId","createComment","commentData","_error$response4","updateComment","commentId","deleteComment","likeAPI","likePost","unlikePost","getLikesCount","isPostLikedByUser","learningPlanAPI","getAllLearningPlans","getLearningPlansByUserId","getLearningPlanById","searchLearningPlans","createLearningPlan","planData","updateLearningPlan","deleteLearningPlan","updateTopicCompletion","planId","topicId","completed","storyAPI","getAllStories","getUserStories","getFeedStories","createStory","storyData","mediaFile","title","content","viewStory","deleteStory","notificationAPI","getUserNotifications","readNotification","deleteNotification","getUnreadNotificationsCount","feedbackAPI","getAllFeedbacks","getUserFeedbacks","getFeedbackById","createFeedback","feedbackData","updateFeedback","deleteFeedback"],"sources":["C:/Users/USER/Downloads/PAF-Project-main/PAF-Project-main/frontend/src/utils/api.js"],"sourcesContent":["// import axios from \"axios\";\n// import env from \"../config/env\";\n\n// // Create axios instance with default config\n// export const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Add debug interceptors\n// if (env.DEBUG) {\n//   api.interceptors.request.use((request) => {\n//     console.log(\"Starting Request\", request);\n//     return request;\n//   });\n\n//   api.interceptors.response.use(\n//     (response) => {\n//       console.log(\"Response:\", response);\n//       return response;\n//     },\n//     (error) => {\n//       console.log(\"Response Error:\", error.response?.data || error.message);\n//       return Promise.reject(error);\n//     },\n//   );\n// }\n\n// // Add request interceptor to set auth token\n// api.interceptors.request.use(\n//   (config) => {\n//     console.log(\"Making API request with config:\", config); // CHANGED: Added detailed logging\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   },\n// );\n\n// // Add response interceptor to handle errors\n// api.interceptors.response.use(\n//   (response) => {\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.log(`Response from ${response.config.url}:`, response.data);\n//     }\n//     return response;\n//   },\n//   (error) => {\n//     if (process.env.NODE_ENV === \"development\") {\n//       console.error(`Error from ${error.config?.url}:`, error.response?.data || error.message);\n//     }\n//     // CHANGED: Only redirect on 401, not 403, to allow FeedbacksPage to handle 403 errors\n//     if (error.response && error.response.status === 401) {\n//       if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n//         console.log(\"401 error detected, clearing token and redirecting to /login\");\n//         localStorage.removeItem(\"token\");\n//         window.location.href = \"/login\";\n//       }\n//     }\n//     return Promise.reject(error);\n//   },\n// );\n\n// // Auth API\n// export const authAPI = {\n//   login: (credentials) => api.post(\"/api/auth/login\", credentials),\n//   register: (userData) => api.post(\"/api/auth/register\", userData),\n// };\n\n// // User API\n// export const userAPI = {\n//   getUserByUsername: (username) => api.get(`/api/users/${username}`),\n//   updateUser: (id, userData) => {\n//     const isFormData = userData instanceof FormData;\n//     const headers = isFormData ? { \"Content-Type\": \"multipart/form-data\" } : { \"Content-Type\": \"application/json\" };\n//     console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`);\n//     return api.put(`/api/users/${id}`, userData, { headers });\n//   },\n//   searchUsers: (query) => api.get(`/api/users/search?query=${query}`),\n//   getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n//   followUser: (id) => api.post(`/api/users/${id}/follow`),\n//   unfollowUser: (id) => api.post(`/api/users/${id}/unfollow`),\n//   getFollowers: (id) => api.get(`/api/users/${id}/followers`),\n//   getFollowing: (id) => api.get(`/api/users/${id}/following`),\n// };\n\n// // Post API\n// export const postAPI = {\n//   getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n//   getPostById: (id) => api.get(`/api/posts/${id}`),\n//   getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n//   getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n//   searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n//   createPost: (postData, files) => {\n//     const formData = new FormData();\n//     formData.append(\"post\", new Blob([JSON.stringify(postData)], { type: \"application/json\" }));\n//     if (files && files.length > 0) {\n//       files.forEach((file, index) => {\n//         if (file) {\n//           console.log(`Appending file ${index}:`, file.name, file.type, file.size);\n//           formData.append(\"files\", file);\n//         }\n//       });\n//     }\n//     console.log(\"Creating post with data:\", postData);\n//     console.log(\"Files count:\", files ? files.length : 0);\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1]);\n//     }\n//     return api.post(\"/api/posts/create\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     });\n//   },\n//   updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n//   deletePost: (id) => api.delete(`/api/posts/${id}`),\n// };\n\n// // Comment API\n// export const commentAPI = {\n//   getCommentsByPostId: (postId) => api.get(`/api/posts/${postId}/comments`),\n//   createComment: async (postId, commentData) => {\n//     console.log(`Creating comment for post ${postId} with data:`, commentData);\n//     try {\n//       const response = await api.post(`/api/posts/${postId}/comments`, commentData);\n//       console.log(\"Comment creation response:\", response);\n//       return response;\n//     } catch (error) {\n//       console.error(`Error creating comment for post ${postId}:`, error);\n//       console.error(\"Error response:\", error.response?.data);\n//       throw error;\n//     }\n//   },\n//   updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n//   deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\n// };\n\n// // Like API\n// export const likeAPI = {\n//   likePost: (postId) => api.post(`/api/posts/${postId}/likes`),\n//   unlikePost: (postId) => api.delete(`/api/posts/${postId}/likes`),\n//   getLikesCount: (postId) => api.get(`/api/posts/${postId}/likes/count`),\n//   isPostLikedByUser: (postId) => api.get(`/api/posts/${postId}/likes/status`),\n// };\n\n// // Learning Plan API\n// export const learningPlanAPI = {\n//   getAllLearningPlans: (page = 0, size = 10) => {\n//     console.log(`Fetching all learning plans with page=${page}, size=${size}`);\n//     return api.get(`/api/learning-plans?page=${page}&size=${size}`);\n//   },\n//   getLearningPlansByUserId: (userId) => {\n//     console.log(`Fetching learning plans for user ${userId}`);\n//     return api.get(`/api/learning-plans/user/${userId}`);\n//   },\n//   getLearningPlanById: (id) => {\n//     console.log(`Fetching learning plan with id ${id}`);\n//     return api.get(`/api/learning-plans/${id}`);\n//   },\n//   searchLearningPlans: (query, page = 0, size = 10) => {\n//     console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`);\n//     return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`);\n//   },\n//   createLearningPlan: (planData) => {\n//     console.log(`Creating learning plan with data:`, planData);\n//     return api.post(\"/api/learning-plans\", planData);\n//   },\n//   updateLearningPlan: (id, planData) => {\n//     console.log(`Updating learning plan ${id} with data:`, planData);\n//     return api.put(`/api/learning-plans/${id}`, planData);\n//   },\n//   deleteLearningPlan: (id) => {\n//     console.log(`Deleting learning plan ${id}`);\n//     return api.delete(`/api/learning-plans/${id}`);\n//   },\n//   updateTopicCompletion: (planId, topicId, completed) => {\n//     console.log(`Updating topic ${topicId} completion status to ${completed}`);\n//     return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, { completed });\n//   },\n// };\n\n// // Story API\n// export const storyAPI = {\n//   getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n//   getUserStories: (userId) => api.get(`/api/stories/user/${userId}`),\n//   getFeedStories: () => api.get(\"/api/stories/feed\"),\n//   createStory: (storyData, mediaFile) => {\n//     const formData = new FormData();\n//     if (storyData.title) {\n//       formData.append(\"title\", storyData.title);\n//     }\n//     if (storyData.content) {\n//       formData.append(\"content\", storyData.content);\n//     }\n//     if (mediaFile) {\n//       console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size);\n//       formData.append(\"media\", mediaFile);\n//     }\n//     console.log(\"Creating story with data:\", storyData);\n//     for (const pair of formData.entries()) {\n//       console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1]);\n//     }\n//     return api.post(\"/api/stories/upload\", formData, {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//       },\n//     });\n//   },\n//   viewStory: (id) => api.post(`/api/stories/${id}/view`),\n//   deleteStory: (id) => api.delete(`/api/stories/${id}`),\n// };\n\n// // Notification API\n// export const notificationAPI = {\n//   getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n//   readNotification: (id) => api.put(`/api/notifications/${id}/read`),\n//   deleteNotification: (id) => api.delete(`/api/notifications/${id}`),\n//   getUnreadNotificationsCount: () => api.get(`/api/notifications/unread/count`), // NEW: Added to fix Header.js error\n// };\n\n// // Feedback API\n// export const feedbackAPI = {\n//   getAllFeedbacks: () => api.get(\"/api/feedbacks\"),\n//   getUserFeedbacks: () => api.get(\"/api/feedbacks/user\"),\n//   getFeedbackById: (id) => api.get(`/api/feedbacks/${id}`),\n//   createFeedback: (feedbackData) => {\n//     console.log(\"Creating feedback with data:\", feedbackData);\n//     return api.post(\"/api/feedbacks\", feedbackData);\n//   },\n//   updateFeedback: (id, feedbackData) => {\n//     console.log(`Updating feedback ${id} with data:`, feedbackData);\n//     return api.put(`/api/feedbacks/${id}`, feedbackData);\n//   },\n//   deleteFeedback: (id) => {\n//     console.log(`Deleting feedback ${id}`);\n//     return api.delete(`/api/feedbacks/${id}`);\n//   },\n// };\n\n\nimport axios from \"axios\";\nimport env from \"../config/env\";\n\n// Create axios instance with default config\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Add debug interceptors\nif (env.DEBUG) {\n  api.interceptors.request.use((request) => {\n    console.log(\"Starting Request\", request);\n    return request;\n  });\n\n  api.interceptors.response.use(\n    (response) => {\n      console.log(\"Response:\", response);\n      return response;\n    },\n    (error) => {\n      console.log(\"Response Error:\", error.response?.data || error.message);\n      return Promise.reject(error);\n    },\n  );\n}\n\n// Add request interceptor to set auth token\napi.interceptors.request.use(\n  (config) => {\n    console.log(\"Making API request with config:\", config);\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  },\n);\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(`Response from ${response.config.url}:`, response.data);\n    }\n    return response;\n  },\n  (error) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.error(`Error from ${error.config?.url}:`, {\n        status: error.response?.status,\n        data: error.response?.data || error.message,\n      });\n    }\n    // CHANGED: Skip redirect for all /api/feedbacks/* endpoints\n    if (\n      error.response &&\n      error.response.status === 401 &&\n      !error.config?.url.startsWith(\"/api/feedbacks/\")\n    ) {\n      if (!window.location.pathname.includes(\"/login\") && !window.location.pathname.includes(\"/register\")) {\n        console.log(\"401 error detected, clearing token and redirecting to /login\");\n        localStorage.removeItem(\"token\");\n        window.location.href = \"/login\";\n      }\n    }\n    return Promise.reject(error);\n  },\n);\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post(\"/api/auth/login\", credentials),\n  register: (userData) => api.post(\"/api/auth/register\", userData),\n};\n\n// User API\nexport const userAPI = {\n  getUserByUsername: (username) => api.get(`/api/users/${username}`),\n  updateUser: (id, userData) => {\n    const isFormData = userData instanceof FormData;\n    const headers = isFormData ? { \"Content-Type\": \"multipart/form-data\" } : { \"Content-Type\": \"application/json\" };\n    console.log(`Updating user ${id} with ${isFormData ? \"FormData\" : \"JSON\"}`);\n    return api.put(`/api/users/${id}`, userData, { headers });\n  },\n  searchUsers: (query) => api.get(`/api/users/search?query=${query}`),\n  getSuggestedUsers: (limit = 5) => api.get(`/api/users/suggested?limit=${limit}`),\n  followUser: (id) => api.post(`/api/users/${id}/follow`),\n  unfollowUser: (id) => api.post(`/api/users/${id}/unfollow`),\n  getFollowers: (id) => api.get(`/api/users/${id}/followers`),\n  getFollowing: (id) => api.get(`/api/users/${id}/following`),\n};\n\n// Post API\nexport const postAPI = {\n  getAllPosts: (page = 0, size = 10) => api.get(`/api/posts?page=${page}&size=${size}`),\n  getPostById: (id) => api.get(`/api/posts/${id}`),\n  getPostsByUserId: (userId, page = 0, size = 10) => api.get(`/api/posts/user/${userId}?page=${page}&size=${size}`),\n  getFeedPosts: (page = 0, size = 10) => api.get(`/api/posts/feed?page=${page}&size=${size}`),\n  searchPosts: (query, page = 0, size = 10) => api.get(`/api/posts/search?query=${query}&page=${page}&size=${size}`),\n  createPost: (postData, files) => {\n    const formData = new FormData();\n    formData.append(\"post\", new Blob([JSON.stringify(postData)], { type: \"application/json\" }));\n    if (files && files.length > 0) {\n      files.forEach((file, index) => {\n        if (file) {\n          console.log(`Appending file ${index}:`, file.name, file.type, file.size);\n          formData.append(\"files\", file);\n        }\n      });\n    }\n    console.log(\"Creating post with data:\", postData);\n    console.log(\"Files count:\", files ? files.length : 0);\n    for (const pair of formData.entries()) {\n      console.log(pair[0], pair[1] instanceof Blob ? \"Blob:\" + pair[1].size : pair[1]);\n    }\n    return api.post(\"/api/posts/create\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n  },\n  updatePost: (id, postData) => api.put(`/api/posts/${id}`, postData),\n  deletePost: (id) => api.delete(`/api/posts/${id}`),\n};\n\n// Comment API\nexport const commentAPI = {\n  getCommentsByPostId: (postId) => api.get(`/api/posts/${postId}/comments`),\n  createComment: async (postId, commentData) => {\n    console.log(`Creating comment for post ${postId} with data:`, commentData);\n    try {\n      const response = await api.post(`/api/posts/${postId}/comments`, commentData);\n      console.log(\"Comment creation response:\", response);\n      return response;\n    } catch (error) {\n      console.error(`Error creating comment for post ${postId}:`, error);\n      console.error(\"Error response:\", error.response?.data);\n      throw error;\n    }\n  },\n  updateComment: (postId, commentId, commentData) => api.put(`/api/posts/${postId}/comments/${commentId}`, commentData),\n  deleteComment: (postId, commentId) => api.delete(`/api/posts/${postId}/comments/${commentId}`),\n};\n\n// Like API\nexport const likeAPI = {\n  likePost: (postId) => api.post(`/api/posts/${postId}/likes`),\n  unlikePost: (postId) => api.delete(`/api/posts/${postId}/likes`),\n  getLikesCount: (postId) => api.get(`/api/posts/${postId}/likes/count`),\n  isPostLikedByUser: (postId) => api.get(`/api/posts/${postId}/likes/status`),\n};\n\n// Learning Plan API\nexport const learningPlanAPI = {\n  getAllLearningPlans: (page = 0, size = 10) => {\n    console.log(`Fetching all learning plans with page=${page}, size=${size}`);\n    return api.get(`/api/learning-plans?page=${page}&size=${size}`);\n  },\n  getLearningPlansByUserId: (userId) => {\n    console.log(`Fetching learning plans for user ${userId}`);\n    return api.get(`/api/learning-plans/user/${userId}`);\n  },\n  getLearningPlanById: (id) => {\n    console.log(`Fetching learning plan with id ${id}`);\n    return api.get(`/api/learning-plans/${id}`);\n  },\n  searchLearningPlans: (query, page = 0, size = 10) => {\n    console.log(`Searching learning plans with query=${query}, page=${page}, size=${size}`);\n    return api.get(`/api/learning-plans/search?query=${query}&page=${page}&size=${size}`);\n  },\n  createLearningPlan: (planData) => {\n    console.log(`Creating learning plan with data:`, planData);\n    return api.post(\"/api/learning-plans\", planData);\n  },\n  updateLearningPlan: (id, planData) => {\n    console.log(`Updating learning plan ${id} with data:`, planData);\n    return api.put(`/api/learning-plans/${id}`, planData);\n  },\n  deleteLearningPlan: (id) => {\n    console.log(`Deleting learning plan ${id}`);\n    return api.delete(`/api/learning-plans/${id}`);\n  },\n  updateTopicCompletion: (planId, topicId, completed) => {\n    console.log(`Updating topic ${topicId} completion status to ${completed}`);\n    return api.put(`/api/learning-plans/${planId}/topics/${topicId}`, { completed });\n  },\n};\n\n// Story API\nexport const storyAPI = {\n  getAllStories: (page = 0, size = 10) => api.get(`/api/stories?page=${page}&size=${size}`),\n  getUserStories: (userId) => api.get(`/api/stories/user/${userId}`),\n  getFeedStories: () => api.get(\"/api/stories/feed\"),\n  createStory: (storyData, mediaFile) => {\n    const formData = new FormData();\n    if (storyData.title) {\n      formData.append(\"title\", storyData.title);\n    }\n    if (storyData.content) {\n      formData.append(\"content\", storyData.content);\n    }\n    if (mediaFile) {\n      console.log(\"Appending story media file:\", mediaFile.name, mediaFile.type, mediaFile.size);\n      formData.append(\"media\", mediaFile);\n    }\n    console.log(\"Creating story with data:\", storyData);\n    for (const pair of formData.entries()) {\n      console.log(pair[0], pair[1] instanceof Blob ? `Blob: ${pair[1].size} bytes` : pair[1]);\n    }\n    return api.post(\"/api/stories/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n  },\n  viewStory: (id) => api.post(`/api/stories/${id}/view`),\n  deleteStory: (id) => api.delete(`/api/stories/${id}`),\n};\n\n// Notification API\nexport const notificationAPI = {\n  getUserNotifications: (page = 0, size = 10) => api.get(`/api/notifications?page=${page}&size=${size}`),\n  readNotification: (id) => api.put(`/api/notifications/${id}/read`),\n  deleteNotification: (id) => api.delete(`/api/notifications/${id}`),\n  getUnreadNotificationsCount: () => api.get(`/api/notifications/unread/count`),\n};\n\n// Feedback API\nexport const feedbackAPI = {\n  getAllFeedbacks: () => api.get(\"/api/feedbacks\"),\n  getUserFeedbacks: () => api.get(\"/api/feedbacks/user\"),\n  getFeedbackById: (id) => api.get(`/api/feedbacks/${id}`),\n  createFeedback: (feedbackData) => {\n    console.log(\"Creating feedback with data:\", feedbackData);\n    return api.post(\"/api/feedbacks\", feedbackData);\n  },\n  updateFeedback: (id, feedbackData) => {\n    console.log(`Updating feedback ${id} with data:`, feedbackData);\n    return api.put(`/api/feedbacks/${id}`, feedbackData);\n  },\n  deleteFeedback: (id) => {\n    console.log(`Deleting feedback ${id}`);\n    return api.delete(`/api/feedbacks/${id}`);\n  },\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}