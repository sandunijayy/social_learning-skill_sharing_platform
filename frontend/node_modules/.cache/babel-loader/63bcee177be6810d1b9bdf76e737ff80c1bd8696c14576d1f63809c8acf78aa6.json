{"ast":null,"code":"var _jsxFileName = \"/Users/pereraw.b.n/PAF project/frontend/src/pages/learning/LearningPlanPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // React Router hook to get URL params\nimport { learningPlanAPI } from \"../api\"; // Import your learningPlanAPI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LearningPlanPage = () => {\n  _s();\n  const {\n    planId\n  } = useParams(); // Get planId from URL\n  const [learningPlan, setLearningPlan] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch learning plan by id when the component mounts or planId changes\n  useEffect(() => {\n    if (!planId) {\n      setError(\"Plan ID is missing.\");\n      return;\n    }\n    const fetchLearningPlan = async id => {\n      try {\n        console.log(\"Making API call to /learning-plans/\" + id);\n        const response = await learningPlanAPI.getLearningPlanById(id);\n        console.log(\"Learning Plan fetched:\", response);\n        setLearningPlan(response.data); // Assuming response.data has the learning plan data\n      } catch (err) {\n        console.error(\"Error fetching learning plan:\", err);\n        setError(\"Failed to fetch learning plan.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLearningPlan(planId); // Call the function with the planId\n  }, [planId]); // Dependency array ensures it re-runs when planId changes\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Learning Plan Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), learningPlan && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: learningPlan.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: learningPlan.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(LearningPlanPage, \"k7fx1kU11s+Pzb405VLj2TaKJWk=\", false, function () {\n  return [useParams];\n});\n_c = LearningPlanPage;\nexport default LearningPlanPage;\nvar _c;\n$RefreshReg$(_c, \"LearningPlanPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","learningPlanAPI","jsxDEV","_jsxDEV","LearningPlanPage","_s","planId","learningPlan","setLearningPlan","loading","setLoading","error","setError","fetchLearningPlan","id","console","log","response","getLearningPlanById","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","_c","$RefreshReg$"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/pages/learning/LearningPlanPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // React Router hook to get URL params\nimport { learningPlanAPI } from \"../api\"; // Import your learningPlanAPI\n\nconst LearningPlanPage = () => {\n  const { planId } = useParams(); // Get planId from URL\n  const [learningPlan, setLearningPlan] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch learning plan by id when the component mounts or planId changes\n  useEffect(() => {\n    if (!planId) {\n      setError(\"Plan ID is missing.\");\n      return;\n    }\n\n    const fetchLearningPlan = async (id) => {\n      try {\n        console.log(\"Making API call to /learning-plans/\" + id);\n        const response = await learningPlanAPI.getLearningPlanById(id);\n        console.log(\"Learning Plan fetched:\", response);\n        setLearningPlan(response.data); // Assuming response.data has the learning plan data\n      } catch (err) {\n        console.error(\"Error fetching learning plan:\", err);\n        setError(\"Failed to fetch learning plan.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchLearningPlan(planId); // Call the function with the planId\n  }, [planId]); // Dependency array ensures it re-runs when planId changes\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      <h1>Learning Plan Details</h1>\n      {learningPlan && (\n        <div>\n          <h2>{learningPlan.title}</h2>\n          <p>{learningPlan.description}</p>\n          {/* Render other details */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LearningPlanPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,SAASC,eAAe,QAAQ,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,MAAM,EAAE;MACXM,QAAQ,CAAC,qBAAqB,CAAC;MAC/B;IACF;IAEA,MAAMC,iBAAiB,GAAG,MAAOC,EAAE,IAAK;MACtC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGF,EAAE,CAAC;QACvD,MAAMG,QAAQ,GAAG,MAAMhB,eAAe,CAACiB,mBAAmB,CAACJ,EAAE,CAAC;QAC9DC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,QAAQ,CAAC;QAC/CT,eAAe,CAACS,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZL,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAES,GAAG,CAAC;QACnDR,QAAQ,CAAC,gCAAgC,CAAC;MAC5C,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,iBAAiB,CAACP,MAAM,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAAkB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAId,KAAK,EAAE,oBAAOR,OAAA;IAAAkB,QAAA,GAAK,SAAO,EAACV,KAAK;EAAA;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,oBACEtB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7BlB,YAAY,iBACXJ,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAKd,YAAY,CAACmB;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7BtB,OAAA;QAAAkB,QAAA,EAAId,YAAY,CAACoB;MAAW;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE9B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CA7CID,gBAAgB;EAAA,QACDJ,SAAS;AAAA;AAAA4B,EAAA,GADxBxB,gBAAgB;AA+CtB,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}