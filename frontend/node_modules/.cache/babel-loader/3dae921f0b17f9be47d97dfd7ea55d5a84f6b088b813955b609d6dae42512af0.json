{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/pereraw.b.n/PAF project/frontend/src/pages/NotificationsPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport { notificationAPI } from \"../utils/api\";\nimport { useToast } from \"../contexts/ToastContext\";\nimport \"./NotificationsPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationsPage = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const {\n    addToast\n  } = useToast();\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const response = await notificationAPI.getUserNotifications();\n      setNotifications(response.data.data.content);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      addToast(\"Failed to load notifications\", \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsRead = async id => {\n    try {\n      await notificationAPI.markNotificationAsRead(id);\n      setNotifications(notifications.map(notification => notification.id === id ? {\n        ...notification,\n        read: true\n      } : notification));\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      addToast(\"Failed to mark notification as read\", \"error\");\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      await notificationAPI.markAllNotificationsAsRead();\n      setNotifications(notifications.map(notification => ({\n        ...notification,\n        read: true\n      })));\n      addToast(\"All notifications marked as read\", \"success\");\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      addToast(\"Failed to mark all notifications as read\", \"error\");\n    }\n  };\n  const getNotificationIcon = type => {\n    switch (type) {\n      case \"LIKE\":\n        return \"favorite\";\n      case \"COMMENT\":\n        return \"chat_bubble\";\n      case \"FOLLOW\":\n        return \"person_add\";\n      default:\n        return \"notifications\";\n    }\n  };\n  const getNotificationLink = (type, referenceId) => {\n    switch (type) {\n      case \"LIKE\":\n      case \"COMMENT\":\n        return `/posts/${referenceId}`;\n      case \"FOLLOW\":\n        return `/profile/${referenceId}`;\n      default:\n        return \"#\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notifications-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), notifications.some(notification => !notification.read) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: markAllAsRead,\n        children: \"Mark all as read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-state\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading notifications...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-list\",\n      children: notifications.length > 0 ? notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification-item ${notification.read ? \"\" : \"unread\"}`,\n        onClick: () => !notification.read && markAsRead(notification.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: getNotificationIcon(notification.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-content\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: getNotificationLink(notification.type, notification.referenceId),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: notification.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"notification-time\",\n              children: format(new Date(notification.createdAt), \"MMM d, yyyy 'at' h:mm a\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), !notification.read && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-badge\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }, this)]\n      }, notification.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"material-icons\",\n          children: \"notifications_off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No notifications yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"When you get notifications, they'll show up here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationsPage, \"EVLJErMY0Q25f7DsP0/2cRl9VZM=\", false, function () {\n  return [useToast];\n});\n_c = NotificationsPage;\nexport default NotificationsPage;\nvar _c;\n$RefreshReg$(_c, \"NotificationsPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","Link","format","notificationAPI","useToast","jsxDEV","_jsxDEV","NotificationsPage","notifications","setNotifications","loading","setLoading","addToast","fetchNotifications","response","getUserNotifications","data","content","error","console","markAsRead","id","markNotificationAsRead","map","notification","read","markAllAsRead","markAllNotificationsAsRead","getNotificationIcon","type","getNotificationLink","referenceId","className","children","fileName","lineNumber","columnNumber","some","onClick","length","to","message","Date","createdAt","_c","$RefreshReg$"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/pages/NotificationsPage.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { format } from \"date-fns\"\nimport { notificationAPI } from \"../utils/api\"\nimport { useToast } from \"../contexts/ToastContext\"\nimport \"./NotificationsPage.css\"\n\nconst NotificationsPage = () => {\n  const [notifications, setNotifications] = useState([])\n  const [loading, setLoading] = useState(true)\n  const { addToast } = useToast()\n\n  useEffect(() => {\n    fetchNotifications()\n  }, [])\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true)\n      const response = await notificationAPI.getUserNotifications()\n      setNotifications(response.data.data.content)\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error)\n      addToast(\"Failed to load notifications\", \"error\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const markAsRead = async (id) => {\n    try {\n      await notificationAPI.markNotificationAsRead(id)\n      setNotifications(\n        notifications.map((notification) => (notification.id === id ? { ...notification, read: true } : notification)),\n      )\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error)\n      addToast(\"Failed to mark notification as read\", \"error\")\n    }\n  }\n\n  const markAllAsRead = async () => {\n    try {\n      await notificationAPI.markAllNotificationsAsRead()\n      setNotifications(notifications.map((notification) => ({ ...notification, read: true })))\n      addToast(\"All notifications marked as read\", \"success\")\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error)\n      addToast(\"Failed to mark all notifications as read\", \"error\")\n    }\n  }\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case \"LIKE\":\n        return \"favorite\"\n      case \"COMMENT\":\n        return \"chat_bubble\"\n      case \"FOLLOW\":\n        return \"person_add\"\n      default:\n        return \"notifications\"\n    }\n  }\n\n  const getNotificationLink = (type, referenceId) => {\n    switch (type) {\n      case \"LIKE\":\n      case \"COMMENT\":\n        return `/posts/${referenceId}`\n      case \"FOLLOW\":\n        return `/profile/${referenceId}`\n      default:\n        return \"#\"\n    }\n  }\n\n  return (\n    <div className=\"notifications-page\">\n      <div className=\"notifications-header\">\n        <h1>Notifications</h1>\n        {notifications.some((notification) => !notification.read) && (\n          <button className=\"btn btn-secondary\" onClick={markAllAsRead}>\n            Mark all as read\n          </button>\n        )}\n      </div>\n\n      {loading ? (\n        <div className=\"loading-state\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading notifications...</p>\n        </div>\n      ) : (\n        <div className=\"notifications-list\">\n          {notifications.length > 0 ? (\n            notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`notification-item ${notification.read ? \"\" : \"unread\"}`}\n                onClick={() => !notification.read && markAsRead(notification.id)}\n              >\n                <div className=\"notification-icon\">\n                  <i className=\"material-icons\">{getNotificationIcon(notification.type)}</i>\n                </div>\n                <div className=\"notification-content\">\n                  <Link to={getNotificationLink(notification.type, notification.referenceId)}>\n                    <p>{notification.message}</p>\n                    <span className=\"notification-time\">\n                      {format(new Date(notification.createdAt), \"MMM d, yyyy 'at' h:mm a\")}\n                    </span>\n                  </Link>\n                </div>\n                {!notification.read && (\n                  <div className=\"notification-badge\">\n                    <span></span>\n                  </div>\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"empty-state\">\n              <i className=\"material-icons\">notifications_off</i>\n              <h3>No notifications yet</h3>\n              <p>When you get notifications, they'll show up here</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default NotificationsPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}