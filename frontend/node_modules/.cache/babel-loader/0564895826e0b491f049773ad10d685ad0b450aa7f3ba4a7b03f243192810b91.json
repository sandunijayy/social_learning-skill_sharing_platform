{"ast":null,"code":"// import axios from \"axios\"\n\n// const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// })\n\n// // Add a request interceptor\n// api.interceptors.request.use(\n//   (config) => {\n//     // Add the following console log to help debug API requests\n//     // Add this near the beginning of the request interceptor function\n//     console.log(\"Making API request with config:\", config)\n//     return config\n//   },\n//   (error) => {\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Add a response interceptor\n// api.interceptors.response.use(\n//   (response) => {\n//     // Add this near the beginning of the response interceptor function\n//     console.log(\"Received API response:\", response)\n//     return response\n//   },\n//   (error) => {\n//     // Add this near the beginning of the error interceptor function\n//     console.error(\"API request error:\", error.response || error)\n//     return Promise.reject(error)\n//   },\n// )\n\n// export default api\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"Making API request with config:\", config);\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Added Authorization header for request:\", config.url);\n  } else {\n    console.warn(\"No token found in localStorage for request:\", config.url);\n  }\n  return config;\n}, error => {\n  console.error(\"Request interceptor error:\", error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  console.log(\"Received API response:\", response);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API request error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","warn","error","Promise","reject","response","_error$response","data","message"],"sources":["C:/Users/USER/Downloads/PAF-Project-main/PAF-Project-main/frontend/src/utils/axios-utils.js"],"sourcesContent":["// import axios from \"axios\"\n\n// const api = axios.create({\n//   baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// })\n\n// // Add a request interceptor\n// api.interceptors.request.use(\n//   (config) => {\n//     // Add the following console log to help debug API requests\n//     // Add this near the beginning of the request interceptor function\n//     console.log(\"Making API request with config:\", config)\n//     return config\n//   },\n//   (error) => {\n//     return Promise.reject(error)\n//   },\n// )\n\n// // Add a response interceptor\n// api.interceptors.response.use(\n//   (response) => {\n//     // Add this near the beginning of the response interceptor function\n//     console.log(\"Received API response:\", response)\n//     return response\n//   },\n//   (error) => {\n//     // Add this near the beginning of the error interceptor function\n//     console.error(\"API request error:\", error.response || error)\n//     return Promise.reject(error)\n//   },\n// )\n\n// export default api\n\n\nimport axios from \"axios\"\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Making API request with config:\", config);\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n      console.log(\"Added Authorization header for request:\", config.url);\n    } else {\n      console.warn(\"No token found in localStorage for request:\", config.url);\n    }\n    return config;\n  },\n  (error) => {\n    console.error(\"Request interceptor error:\", error);\n    return Promise.reject(error);\n  }\n)\n\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"Received API response:\", response);\n    return response;\n  },\n  (error) => {\n    console.error(\"API request error:\", error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n)\n\nexport default api"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEL,MAAM,CAAC;EACtD,IAAIC,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IACnDG,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEL,MAAM,CAACM,GAAG,CAAC;EACpE,CAAC,MAAM;IACLF,OAAO,CAACG,IAAI,CAAC,6CAA6C,EAAEP,MAAM,CAACM,GAAG,CAAC;EACzE;EACA,OAAON,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACTJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDlB,GAAG,CAACO,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAAC;EAC/C,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACTR,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAE,EAAAI,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,IAAI,KAAIL,KAAK,CAACM,OAAO,CAAC;EAC1E,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}