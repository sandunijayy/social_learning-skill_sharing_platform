{"ast":null,"code":"\"use client\";\n\nvar _s = $RefreshSig$();\nimport { useToast } from \"../contexts/ToastContext\";\n\n// Function to extract error message from API error\nexport const getErrorMessage = error => {\n  if (error.response && error.response.data) {\n    // If the error has a response with data\n    if (error.response.data.message) {\n      return error.response.data.message;\n    } else if (error.response.data.error) {\n      return error.response.data.error;\n    }\n  }\n\n  // Default error message\n  return error.message || \"An unexpected error occurred\";\n};\n\n// Hook to handle API errors with toast\nexport const useErrorHandler = () => {\n  _s();\n  const {\n    showToast\n  } = useToast();\n  const handleError = (error, customMessage = null) => {\n    const message = customMessage || getErrorMessage(error);\n    console.error(\"API Error:\", error);\n    showToast(message, \"error\");\n    return message;\n  };\n  return {\n    handleError\n  };\n};\n_s(useErrorHandler, \"uP7b1CNMKFvZhP9V3j6JIP2JD7A=\", false, function () {\n  return [useToast];\n});","map":{"version":3,"names":["_s","$RefreshSig$","useToast","getErrorMessage","error","response","data","message","useErrorHandler","showToast","handleError","customMessage","console"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/utils/errorHandler.js"],"sourcesContent":["\"use client\"\n\nimport { useToast } from \"../contexts/ToastContext\"\n\n// Function to extract error message from API error\nexport const getErrorMessage = (error) => {\n  if (error.response && error.response.data) {\n    // If the error has a response with data\n    if (error.response.data.message) {\n      return error.response.data.message\n    } else if (error.response.data.error) {\n      return error.response.data.error\n    }\n  }\n\n  // Default error message\n  return error.message || \"An unexpected error occurred\"\n}\n\n// Hook to handle API errors with toast\nexport const useErrorHandler = () => {\n  const { showToast } = useToast()\n\n  const handleError = (error, customMessage = null) => {\n    const message = customMessage || getErrorMessage(error)\n    console.error(\"API Error:\", error)\n    showToast(message, \"error\")\n    return message\n  }\n\n  return { handleError }\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,EAAA,GAAAC,YAAA;AAEZ,SAASC,QAAQ,QAAQ,0BAA0B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACxC,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,EAAE;IACzC;IACA,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;MAC/B,OAAOH,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO;IACpC,CAAC,MAAM,IAAIH,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,EAAE;MACpC,OAAOA,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK;IAClC;EACF;;EAEA;EACA,OAAOA,KAAK,CAACG,OAAO,IAAI,8BAA8B;AACxD,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAR,EAAA;EACnC,MAAM;IAAES;EAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAEhC,MAAMQ,WAAW,GAAGA,CAACN,KAAK,EAAEO,aAAa,GAAG,IAAI,KAAK;IACnD,MAAMJ,OAAO,GAAGI,aAAa,IAAIR,eAAe,CAACC,KAAK,CAAC;IACvDQ,OAAO,CAACR,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClCK,SAAS,CAACF,OAAO,EAAE,OAAO,CAAC;IAC3B,OAAOA,OAAO;EAChB,CAAC;EAED,OAAO;IAAEG;EAAY,CAAC;AACxB,CAAC;AAAAV,EAAA,CAXYQ,eAAe;EAAA,QACJN,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}