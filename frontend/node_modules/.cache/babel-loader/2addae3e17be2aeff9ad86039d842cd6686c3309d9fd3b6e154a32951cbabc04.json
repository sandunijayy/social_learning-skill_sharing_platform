{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/pereraw.b.n/PAF project/frontend/src/pages/posts/EditPostPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { postAPI } from \"../../utils/api\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { useToast } from \"../../contexts/ToastContext\";\nimport { processMediaItems } from \"../../utils/mediaUtils\";\nimport \"./CreatePostPage.css\"; // Reusing the same styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mediaLimitsStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  marginBottom: \"8px\",\n  color: \"#666\",\n  fontSize: \"0.85rem\"\n};\nconst EditPostPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    currentUser\n  } = useAuth();\n  const {\n    showToast\n  } = useToast();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: \"\",\n    content: \"\",\n    postType: \"SKILL\",\n    media: []\n  });\n  const [existingMedia, setExistingMedia] = useState([]);\n  const [mediaPreviews, setMediaPreviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingPost, setLoadingPost] = useState(true);\n  const [uploadStatus, setUploadStatus] = useState(null);\n\n  // Fetch the post data when the component mounts\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        setLoadingPost(true);\n        const response = await postAPI.getPostById(id);\n        const post = response.data.data;\n\n        // Check if the current user is the author of the post\n        if (post.user.id !== currentUser.id) {\n          showToast(\"You can only edit your own posts\", \"error\");\n          navigate(`/posts/${id}`);\n          return;\n        }\n        setFormData({\n          title: post.title || \"\",\n          content: post.content || \"\",\n          postType: post.type || \"SKILL\",\n          media: []\n        });\n\n        // Process existing media\n        if (post.media && Array.isArray(post.media)) {\n          const processedMedia = processMediaItems(post.media);\n          setExistingMedia(processedMedia);\n        }\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        showToast(\"Failed to load post data\", \"error\");\n        navigate(\"/\");\n      } finally {\n        setLoadingPost(false);\n      }\n    };\n    if (id) {\n      fetchPost();\n    }\n  }, [id, currentUser, navigate, showToast]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleFileChange = e => {\n    const files = Array.from(e.target.files);\n\n    // Check if total files (existing + new) exceeds 3\n    if (existingMedia.length + files.length > 3) {\n      showToast(`You can only have 3 media files in total. You already have ${existingMedia.length}.`, \"error\");\n      setUploadStatus(`Error: Maximum 3 files allowed (${existingMedia.length} existing + ${files.length} new)`);\n      return;\n    }\n\n    // Check if any file is a video\n    const videoFile = files.find(file => file.type.startsWith(\"video/\"));\n    if (videoFile) {\n      // Create a temporary URL for the video\n      const videoUrl = URL.createObjectURL(videoFile);\n      const video = document.createElement(\"video\");\n      video.onloadedmetadata = () => {\n        URL.revokeObjectURL(videoUrl);\n\n        // Check if video is longer than 30 seconds\n        if (video.duration > 30) {\n          showToast(\"Videos must be 30 seconds or less\", \"error\");\n          setUploadStatus(\"Error: Videos must be 30 seconds or less\");\n          return;\n        }\n\n        // If video is valid, proceed with the upload\n        processValidFiles(files);\n      };\n      video.onerror = () => {\n        URL.revokeObjectURL(videoUrl);\n        showToast(\"Error validating video file\", \"error\");\n        setUploadStatus(\"Error validating video file\");\n      };\n      video.src = videoUrl;\n    } else {\n      // If no video files, proceed with the upload\n      processValidFiles(files);\n    }\n  };\n  const processValidFiles = files => {\n    if (files.length > 0) {\n      // Log file details for debugging\n      files.forEach(file => {\n        console.log(\"Selected file:\", file.name, file.type, file.size);\n      });\n      setFormData(prev => ({\n        ...prev,\n        media: files\n      }));\n      setUploadStatus(`${files.length} new file(s) selected`);\n\n      // Generate previews for all files\n      const previews = [];\n      files.forEach(file => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          previews.push({\n            id: Math.random().toString(36).substr(2, 9),\n            type: file.type,\n            url: reader.result\n          });\n          if (previews.length === files.length) {\n            setMediaPreviews(previews);\n            console.log(\"Previews generated\");\n          }\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n  };\n  const handleRemoveExistingMedia = index => {\n    setExistingMedia(prev => prev.filter((_, i) => i !== index));\n  };\n  const handleRemoveNewMedia = index => {\n    setMediaPreviews(prev => prev.filter((_, i) => i !== index));\n    setFormData(prev => ({\n      ...prev,\n      media: prev.media.filter((_, i) => i !== index)\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!currentUser) {\n      showToast(\"Please login to edit a post\", \"error\");\n      navigate(\"/login\");\n      return;\n    }\n    setLoading(true);\n    setUploadStatus(\"Preparing to update post...\");\n    try {\n      // Create the post data object\n      const postData = {\n        title: formData.title,\n        content: formData.content,\n        type: formData.postType\n        // We'll need to handle existing media IDs to keep and new media to add\n        // This depends on how your backend handles media updates\n      };\n      console.log(\"Updating post:\", postData);\n      setUploadStatus(\"Updating post data...\");\n\n      // For now, we'll just update the post content and type\n      // In a real implementation, you'd need to handle media updates as well\n      const response = await postAPI.updatePost(id, postData);\n      console.log(\"Post update response:\", response);\n      setUploadStatus(\"Post updated successfully!\");\n      showToast(\"Post updated successfully!\", \"success\");\n\n      // Add a small delay before navigation to ensure the post is saved\n      setUploadStatus(\"Redirecting to post...\");\n      setTimeout(() => {\n        navigate(`/posts/${id}`);\n      }, 1000);\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.error(\"Error updating post:\", error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Failed to update post\";\n      setUploadStatus(`Error: ${errorMessage}`);\n      showToast(errorMessage, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loadingPost) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading post data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-post-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"create-post-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postType\",\n          children: \"Post Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"postType\",\n          name: \"postType\",\n          value: formData.postType,\n          onChange: handleChange,\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"SKILL\",\n            children: \"Skill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"PROGRESS\",\n            children: \"Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"PLAN\",\n            children: \"Plan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          name: \"title\",\n          value: formData.title,\n          onChange: handleChange,\n          placeholder: \"Enter a descriptive title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"content\",\n          children: \"Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"content\",\n          name: \"content\",\n          value: formData.content,\n          onChange: handleChange,\n          placeholder: \"Share your knowledge, ask a question, or start a discussion\",\n          rows: \"8\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), existingMedia.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Existing Media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-previews\",\n          children: existingMedia.map((media, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-preview\",\n            children: [media.type === \"IMAGE\" ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: media.url || \"/placeholder.svg\",\n              alt: `Existing media ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 21\n            }, this) : media.type === \"VIDEO\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n              controls: true,\n              src: media.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 21\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"remove-media-btn\",\n              onClick: () => handleRemoveExistingMedia(index),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this)]\n          }, media.id || index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"media\",\n          children: \"Add New Media (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: mediaLimitsStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"\\u2022 Maximum 3 files per post total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"\\u2022 Videos must be 30 seconds or less\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"\\u2022 You have \", existingMedia.length, \" existing media files (\", 3 - existingMedia.length, \" slots available)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"media\",\n          name: \"media\",\n          onChange: handleFileChange,\n          accept: \"image/*,video/*\",\n          multiple: true,\n          disabled: existingMedia.length >= 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-status\",\n          style: {\n            marginTop: \"10px\",\n            padding: \"8px\",\n            backgroundColor: \"#f0f0f0\",\n            borderRadius: \"4px\",\n            fontSize: \"14px\"\n          },\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), mediaPreviews.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-previews\",\n          children: mediaPreviews.map((preview, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-preview\",\n            children: [preview.type.startsWith(\"image/\") ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: preview.url || \"/placeholder.svg\",\n              alt: `Preview ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 21\n            }, this) : preview.type.startsWith(\"video/\") ? /*#__PURE__*/_jsxDEV(\"video\", {\n              controls: true,\n              src: preview.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 21\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"remove-media-btn\",\n              onClick: () => handleRemoveNewMedia(index),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 19\n            }, this)]\n          }, preview.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => navigate(`/posts/${id}`),\n          className: \"cancel-button\",\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: loading,\n          children: loading ? \"Updating Post...\" : \"Update Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPostPage, \"x6wLMfnif/4QGW0K0DUxE1pyg3A=\", false, function () {\n  return [useParams, useAuth, useToast, useNavigate];\n});\n_c = EditPostPage;\nexport default EditPostPage;\nvar _c;\n$RefreshReg$(_c, \"EditPostPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useNavigate","useParams","postAPI","useAuth","useToast","processMediaItems","jsxDEV","_jsxDEV","mediaLimitsStyle","display","flexDirection","marginBottom","color","fontSize","EditPostPage","id","currentUser","showToast","navigate","formData","setFormData","title","content","postType","media","existingMedia","setExistingMedia","mediaPreviews","setMediaPreviews","loading","setLoading","loadingPost","setLoadingPost","uploadStatus","setUploadStatus","fetchPost","response","getPostById","post","data","user","type","Array","isArray","processedMedia","error","console","handleChange","e","name","value","target","prev","handleFileChange","files","from","length","videoFile","find","file","startsWith","videoUrl","URL","createObjectURL","video","document","createElement","onloadedmetadata","revokeObjectURL","duration","processValidFiles","onerror","src","forEach","log","size","previews","reader","FileReader","onloadend","push","Math","random","toString","substr","url","result","readAsDataURL","handleRemoveExistingMedia","index","filter","_","i","handleRemoveNewMedia","handleSubmit","preventDefault","postData","updatePost","setTimeout","_error$response","_error$response$data","_error$response2","_error$response2$data","errorMessage","message","className","children","fileName","lineNumber","columnNumber","onSubmit","htmlFor","onChange","required","placeholder","rows","map","alt","controls","onClick","style","accept","multiple","disabled","marginTop","padding","backgroundColor","borderRadius","preview","_c","$RefreshReg$"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/pages/posts/EditPostPage.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\nimport { postAPI } from \"../../utils/api\"\nimport { useAuth } from \"../../contexts/AuthContext\"\nimport { useToast } from \"../../contexts/ToastContext\"\nimport { processMediaItems } from \"../../utils/mediaUtils\"\nimport \"./CreatePostPage.css\" // Reusing the same styles\n\nconst mediaLimitsStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  marginBottom: \"8px\",\n  color: \"#666\",\n  fontSize: \"0.85rem\",\n}\n\nconst EditPostPage = () => {\n  const { id } = useParams()\n  const { currentUser } = useAuth()\n  const { showToast } = useToast()\n  const navigate = useNavigate()\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    content: \"\",\n    postType: \"SKILL\",\n    media: [],\n  })\n\n  const [existingMedia, setExistingMedia] = useState([])\n  const [mediaPreviews, setMediaPreviews] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [loadingPost, setLoadingPost] = useState(true)\n  const [uploadStatus, setUploadStatus] = useState(null)\n\n  // Fetch the post data when the component mounts\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        setLoadingPost(true)\n        const response = await postAPI.getPostById(id)\n        const post = response.data.data\n\n        // Check if the current user is the author of the post\n        if (post.user.id !== currentUser.id) {\n          showToast(\"You can only edit your own posts\", \"error\")\n          navigate(`/posts/${id}`)\n          return\n        }\n\n        setFormData({\n          title: post.title || \"\",\n          content: post.content || \"\",\n          postType: post.type || \"SKILL\",\n          media: [],\n        })\n\n        // Process existing media\n        if (post.media && Array.isArray(post.media)) {\n          const processedMedia = processMediaItems(post.media)\n          setExistingMedia(processedMedia)\n        }\n      } catch (error) {\n        console.error(\"Error fetching post:\", error)\n        showToast(\"Failed to load post data\", \"error\")\n        navigate(\"/\")\n      } finally {\n        setLoadingPost(false)\n      }\n    }\n\n    if (id) {\n      fetchPost()\n    }\n  }, [id, currentUser, navigate, showToast])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setFormData((prev) => ({ ...prev, [name]: value }))\n  }\n\n  const handleFileChange = (e) => {\n    const files = Array.from(e.target.files)\n\n    // Check if total files (existing + new) exceeds 3\n    if (existingMedia.length + files.length > 3) {\n      showToast(`You can only have 3 media files in total. You already have ${existingMedia.length}.`, \"error\")\n      setUploadStatus(`Error: Maximum 3 files allowed (${existingMedia.length} existing + ${files.length} new)`)\n      return\n    }\n\n    // Check if any file is a video\n    const videoFile = files.find((file) => file.type.startsWith(\"video/\"))\n\n    if (videoFile) {\n      // Create a temporary URL for the video\n      const videoUrl = URL.createObjectURL(videoFile)\n      const video = document.createElement(\"video\")\n\n      video.onloadedmetadata = () => {\n        URL.revokeObjectURL(videoUrl)\n\n        // Check if video is longer than 30 seconds\n        if (video.duration > 30) {\n          showToast(\"Videos must be 30 seconds or less\", \"error\")\n          setUploadStatus(\"Error: Videos must be 30 seconds or less\")\n          return\n        }\n\n        // If video is valid, proceed with the upload\n        processValidFiles(files)\n      }\n\n      video.onerror = () => {\n        URL.revokeObjectURL(videoUrl)\n        showToast(\"Error validating video file\", \"error\")\n        setUploadStatus(\"Error validating video file\")\n      }\n\n      video.src = videoUrl\n    } else {\n      // If no video files, proceed with the upload\n      processValidFiles(files)\n    }\n  }\n\n  const processValidFiles = (files) => {\n    if (files.length > 0) {\n      // Log file details for debugging\n      files.forEach((file) => {\n        console.log(\"Selected file:\", file.name, file.type, file.size)\n      })\n\n      setFormData((prev) => ({ ...prev, media: files }))\n      setUploadStatus(`${files.length} new file(s) selected`)\n\n      // Generate previews for all files\n      const previews = []\n\n      files.forEach((file) => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n          previews.push({\n            id: Math.random().toString(36).substr(2, 9),\n            type: file.type,\n            url: reader.result,\n          })\n\n          if (previews.length === files.length) {\n            setMediaPreviews(previews)\n            console.log(\"Previews generated\")\n          }\n        }\n        reader.readAsDataURL(file)\n      })\n    }\n  }\n\n  const handleRemoveExistingMedia = (index) => {\n    setExistingMedia((prev) => prev.filter((_, i) => i !== index))\n  }\n\n  const handleRemoveNewMedia = (index) => {\n    setMediaPreviews((prev) => prev.filter((_, i) => i !== index))\n    setFormData((prev) => ({\n      ...prev,\n      media: prev.media.filter((_, i) => i !== index),\n    }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (!currentUser) {\n      showToast(\"Please login to edit a post\", \"error\")\n      navigate(\"/login\")\n      return\n    }\n\n    setLoading(true)\n    setUploadStatus(\"Preparing to update post...\")\n\n    try {\n      // Create the post data object\n      const postData = {\n        title: formData.title,\n        content: formData.content,\n        type: formData.postType,\n        // We'll need to handle existing media IDs to keep and new media to add\n        // This depends on how your backend handles media updates\n      }\n\n      console.log(\"Updating post:\", postData)\n      setUploadStatus(\"Updating post data...\")\n\n      // For now, we'll just update the post content and type\n      // In a real implementation, you'd need to handle media updates as well\n      const response = await postAPI.updatePost(id, postData)\n\n      console.log(\"Post update response:\", response)\n      setUploadStatus(\"Post updated successfully!\")\n\n      showToast(\"Post updated successfully!\", \"success\")\n\n      // Add a small delay before navigation to ensure the post is saved\n      setUploadStatus(\"Redirecting to post...\")\n      setTimeout(() => {\n        navigate(`/posts/${id}`)\n      }, 1000)\n    } catch (error) {\n      console.error(\"Error updating post:\", error)\n      const errorMessage = error.response?.data?.message || error.response?.data?.error || \"Failed to update post\"\n      setUploadStatus(`Error: ${errorMessage}`)\n      showToast(errorMessage, \"error\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loadingPost) {\n    return <div className=\"loading\">Loading post data...</div>\n  }\n\n  return (\n    <div className=\"create-post-container\">\n      <h1>Edit Post</h1>\n\n      <form onSubmit={handleSubmit} className=\"create-post-form\">\n        <div className=\"form-group\">\n          <label htmlFor=\"postType\">Post Type</label>\n          <select id=\"postType\" name=\"postType\" value={formData.postType} onChange={handleChange} required>\n            <option value=\"SKILL\">Skill</option>\n            <option value=\"PROGRESS\">Progress</option>\n            <option value=\"PLAN\">Plan</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            value={formData.title}\n            onChange={handleChange}\n            placeholder=\"Enter a descriptive title\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"content\">Content</label>\n          <textarea\n            id=\"content\"\n            name=\"content\"\n            value={formData.content}\n            onChange={handleChange}\n            placeholder=\"Share your knowledge, ask a question, or start a discussion\"\n            rows=\"8\"\n            required\n          />\n        </div>\n\n        {existingMedia.length > 0 && (\n          <div className=\"form-group\">\n            <label>Existing Media</label>\n            <div className=\"media-previews\">\n              {existingMedia.map((media, index) => (\n                <div key={media.id || index} className=\"media-preview\">\n                  {media.type === \"IMAGE\" ? (\n                    <img src={media.url || \"/placeholder.svg\"} alt={`Existing media ${index + 1}`} />\n                  ) : media.type === \"VIDEO\" ? (\n                    <video controls src={media.url} />\n                  ) : null}\n                  <button type=\"button\" className=\"remove-media-btn\" onClick={() => handleRemoveExistingMedia(index)}>\n                    ✕\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label htmlFor=\"media\">Add New Media (Optional)</label>\n          <div style={mediaLimitsStyle}>\n            <small>• Maximum 3 files per post total</small>\n            <small>• Videos must be 30 seconds or less</small>\n            <small>\n              • You have {existingMedia.length} existing media files ({3 - existingMedia.length} slots available)\n            </small>\n          </div>\n          <input\n            type=\"file\"\n            id=\"media\"\n            name=\"media\"\n            onChange={handleFileChange}\n            accept=\"image/*,video/*\"\n            multiple\n            disabled={existingMedia.length >= 3}\n          />\n\n          {uploadStatus && (\n            <div\n              className=\"upload-status\"\n              style={{\n                marginTop: \"10px\",\n                padding: \"8px\",\n                backgroundColor: \"#f0f0f0\",\n                borderRadius: \"4px\",\n                fontSize: \"14px\",\n              }}\n            >\n              {uploadStatus}\n            </div>\n          )}\n\n          {mediaPreviews.length > 0 && (\n            <div className=\"media-previews\">\n              {mediaPreviews.map((preview, index) => (\n                <div key={preview.id} className=\"media-preview\">\n                  {preview.type.startsWith(\"image/\") ? (\n                    <img src={preview.url || \"/placeholder.svg\"} alt={`Preview ${index + 1}`} />\n                  ) : preview.type.startsWith(\"video/\") ? (\n                    <video controls src={preview.url} />\n                  ) : null}\n                  <button type=\"button\" className=\"remove-media-btn\" onClick={() => handleRemoveNewMedia(index)}>\n                    ✕\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"form-actions\">\n          <button type=\"button\" onClick={() => navigate(`/posts/${id}`)} className=\"cancel-button\" disabled={loading}>\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"submit-button\" disabled={loading}>\n            {loading ? \"Updating Post...\" : \"Update Post\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default EditPostPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}