{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/pereraw.b.n/PAF project/frontend/src/components/media/MediaLoader.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getPlaceholderImage } from \"../../utils/placeholderUtils\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MediaLoader = ({\n  src,\n  alt,\n  className = \"\",\n  type = \"IMAGE\",\n  withFallback = true,\n  placeholderWidth = 200,\n  placeholderHeight = 200\n}) => {\n  _s();\n  const [currentSrc, setCurrentSrc] = useState(src);\n  const [error, setError] = useState(false);\n  const [fallbackAttempted, setFallbackAttempted] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Reset state when src changes\n  useEffect(() => {\n    setCurrentSrc(src);\n    setError(false);\n    setFallbackAttempted(false);\n    setLoading(true);\n  }, [src]);\n\n  // Try to create a direct URL from the original URL\n  const createDirectUrl = url => {\n    if (!url) return null;\n\n    // Extract filename from URL\n    const urlParts = url.split(\"/\");\n    const filename = urlParts[urlParts.length - 1];\n\n    // If we have a filename, create a direct URL\n    if (filename && filename.includes(\".\")) {\n      // Try different base paths\n      const apiUrl = process.env.REACT_APP_API_URL || \"http://localhost:8080\";\n      return `${apiUrl}/uploads/${filename}`;\n    }\n    return null;\n  };\n  const handleError = () => {\n    console.error(`Error loading media: ${currentSrc}`);\n    if (withFallback && !fallbackAttempted) {\n      setFallbackAttempted(true);\n\n      // Try a direct URL as fallback\n      const directUrl = createDirectUrl(src);\n      if (directUrl && directUrl !== currentSrc) {\n        console.log(`Trying fallback URL: ${directUrl}`);\n        setCurrentSrc(directUrl);\n        return;\n      }\n    }\n\n    // If we've already tried a fallback or don't have one, show error state\n    setError(true);\n    setLoading(false);\n  };\n  const handleLoad = () => {\n    setLoading(false);\n    setError(false);\n  };\n  if (type === \"VIDEO\" || src && src.match(/\\.(mp4|webm|ogg)$/i)) {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      className: `${className} ${error ? \"media-error\" : \"\"}`,\n      onError: handleError,\n      onLoadedData: handleLoad,\n      style: {\n        maxWidth: \"100%\",\n        height: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: currentSrc,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Default to image\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-error\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: getPlaceholderImage(placeholderWidth, placeholderHeight, \"Image not available\") || \"/placeholder.svg\",\n        alt: alt || \"Media not available\",\n        className: `${className} placeholder-image`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentSrc || \"/placeholder.svg\",\n      alt: alt || \"Media\",\n      className: `${className} ${loading ? \"loading\" : \"loaded\"}`,\n      onError: handleError,\n      onLoad: handleLoad,\n      crossOrigin: \"anonymous\",\n      style: {\n        display: loading ? \"none\" : \"block\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(MediaLoader, \"48d/WdkqPAqgBTbxAPjRKINoafk=\");\n_c = MediaLoader;\nexport default MediaLoader;\nvar _c;\n$RefreshReg$(_c, \"MediaLoader\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","getPlaceholderImage","jsxDEV","_jsxDEV","Fragment","_Fragment","MediaLoader","src","alt","className","type","withFallback","placeholderWidth","placeholderHeight","currentSrc","setCurrentSrc","error","setError","fallbackAttempted","setFallbackAttempted","loading","setLoading","createDirectUrl","url","urlParts","split","filename","length","includes","apiUrl","process","env","REACT_APP_API_URL","handleError","console","directUrl","log","handleLoad","match","controls","onError","onLoadedData","style","maxWidth","height","children","fileName","lineNumber","columnNumber","onLoad","crossOrigin","display","_c","$RefreshReg$"],"sources":["/Users/pereraw.b.n/PAF project/frontend/src/components/media/MediaLoader.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { getPlaceholderImage } from \"../../utils/placeholderUtils\"\n\nconst MediaLoader = ({\n  src,\n  alt,\n  className = \"\",\n  type = \"IMAGE\",\n  withFallback = true,\n  placeholderWidth = 200,\n  placeholderHeight = 200,\n}) => {\n  const [currentSrc, setCurrentSrc] = useState(src)\n  const [error, setError] = useState(false)\n  const [fallbackAttempted, setFallbackAttempted] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  // Reset state when src changes\n  useEffect(() => {\n    setCurrentSrc(src)\n    setError(false)\n    setFallbackAttempted(false)\n    setLoading(true)\n  }, [src])\n\n  // Try to create a direct URL from the original URL\n  const createDirectUrl = (url) => {\n    if (!url) return null\n\n    // Extract filename from URL\n    const urlParts = url.split(\"/\")\n    const filename = urlParts[urlParts.length - 1]\n\n    // If we have a filename, create a direct URL\n    if (filename && filename.includes(\".\")) {\n      // Try different base paths\n      const apiUrl = process.env.REACT_APP_API_URL || \"http://localhost:8080\"\n      return `${apiUrl}/uploads/${filename}`\n    }\n\n    return null\n  }\n\n  const handleError = () => {\n    console.error(`Error loading media: ${currentSrc}`)\n\n    if (withFallback && !fallbackAttempted) {\n      setFallbackAttempted(true)\n\n      // Try a direct URL as fallback\n      const directUrl = createDirectUrl(src)\n      if (directUrl && directUrl !== currentSrc) {\n        console.log(`Trying fallback URL: ${directUrl}`)\n        setCurrentSrc(directUrl)\n        return\n      }\n    }\n\n    // If we've already tried a fallback or don't have one, show error state\n    setError(true)\n    setLoading(false)\n  }\n\n  const handleLoad = () => {\n    setLoading(false)\n    setError(false)\n  }\n\n  if (type === \"VIDEO\" || (src && src.match(/\\.(mp4|webm|ogg)$/i))) {\n    return (\n      <video\n        controls\n        className={`${className} ${error ? \"media-error\" : \"\"}`}\n        onError={handleError}\n        onLoadedData={handleLoad}\n        style={{ maxWidth: \"100%\", height: \"auto\" }}\n      >\n        <source src={currentSrc} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    )\n  }\n\n  // Default to image\n  return (\n    <>\n      {loading && <div className=\"media-loading\">Loading...</div>}\n\n      {error ? (\n        <div className=\"media-error\">\n          <img\n            src={getPlaceholderImage(placeholderWidth, placeholderHeight, \"Image not available\") || \"/placeholder.svg\"}\n            alt={alt || \"Media not available\"}\n            className={`${className} placeholder-image`}\n          />\n        </div>\n      ) : (\n        <img\n          src={currentSrc || \"/placeholder.svg\"}\n          alt={alt || \"Media\"}\n          className={`${className} ${loading ? \"loading\" : \"loaded\"}`}\n          onError={handleError}\n          onLoad={handleLoad}\n          crossOrigin=\"anonymous\"\n          style={{ display: loading ? \"none\" : \"block\" }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default MediaLoader\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}